DROP DATABASE IF EXISTS db_inasoftware;
CREATE DATABASE db_inasoftware;

CREATE USER 'Kevin'@'localhost' IDENTIFIED WITH mysql_native_password BY '1234';
USE db_inasoftware;

GRANT ALL PRIVILEGES ON db_inasoftware TO 'Kevin'@'localhost' WITH GRANT OPTION;

FLUSH PRIVILEGES;

-- TABLA Tipos de Usuarios
CREATE TABLE `Tipo_Usuarios` (
	`ID` INT NOT NULL AUTO_INCREMENT,
	`Nombre` VARCHAR(45) DEFAULT NULL,
	CONSTRAINT Tipos_Usuariospk PRIMARY KEY(id)
);

-- TABLA Usuarios
CREATE TABLE `Usuarios` (
  	`ID` INT NOT NULL AUTO_INCREMENT,
  	`Nombre` VARCHAR(70) NOT NULL,
  	`Usuario` VARCHAR(50) NOT NULL,
  	`Password` VARCHAR(80) DEFAULT NULL,
  	`ID_Tipo` INT NOT NULL,
	CONSTRAINT Usuariospk PRIMARY KEY(id),
	CONSTRAINT Usuariosfk FOREIGN KEY(ID_Tipo) REFERENCES Tipo_Usuarios(ID) ON UPDATE CASCADE ON DELETE CASCADE 
);

-- TABLA Cliente
CREATE TABLE `Clientes` (
  	`ID` INT NOT NULL AUTO_INCREMENT,
  	`Nombre` VARCHAR(70) NOT NULL,
	`Telefono` VARCHAR(10) DEFAULT NULL,
  	`Direccion` VARCHAR(100) DEFAULT NULL,
  	`Cedula` VARCHAR(20) DEFAULT NULL,
	CONSTRAINT Clientespk PRIMARY KEY(ID)
);


-- TABLA Proveedor
CREATE TABLE `Proveedor` (
  	`ID` INT NOT NULL AUTO_INCREMENT,
  	`Nombre` VARCHAR(70) NOT NULL,
	`Telefono` VARCHAR(10) DEFAULT NULL,
	`Direccion` VARCHAR(100) DEFAULT NULL,
	`RUC` VARCHAR(20) DEFAULT NULL, 
	CONSTRAINT Proveedorpk PRIMARY KEY(id)
);

-- TABLA Productos
CREATE TABLE `Productos` (
  	`ID` INT NOT NULL AUTO_INCREMENT,
  	`Codigo` VARCHAR(45) UNIQUE NOT NULL,
  	`Nombre` VARCHAR(100) NOT NULL,
  	`Existencias` INT NOT NULL,
	`Precio_Compra` DOUBLE NOT NULL,
	`Precio_Venta` DOUBLE NOT NULL,
  	`Precio_Total` DOUBLE NOT NULL,
  	`Observacion` VARCHAR(200) DEFAULT NULL,
	`ID_Proveedor` INT NOT NULL,
  	CONSTRAINT Productospk PRIMARY KEY(id),
	CONSTRAINT Productosfk FOREIGN KEY(ID_Proveedor) REFERENCES Proveedor(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- TABLA Factura
CREATE TABLE `Facturas`(
	`ID` INT NOT NULL AUTO_INCREMENT,
	`Codigo_Fac` INT DEFAULT 0,
	`Fecha` DATETIME NOT NULL,
	`Descuento` DOUBLE DEFAULT NULL,
	`Subtotal` DOUBLE DEFAULT NULL,
	`Total_Final` DOUBLE DEFAULT NULL,
	`Efectivo` DOUBLE DEFAULT NULL,
	`Devolucion` DOUBLE DEFAULT NULL,
	`ID_Usuario` INT NOT NULL,
	`ID_Cliente` INT NOT NULL,
	CONSTRAINT Facturaspk PRIMARY KEY(ID),
	CONSTRAINT Facturasfk1 FOREIGN KEY(ID_usuario) REFERENCES Usuarios(ID) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT Facturasfk2 FOREIGN KEY(ID_cliente) REFERENCES Clientes(ID) ON UPDATE CASCADE ON DELETE CASCADE
);


-- TABLA Detalle Factura 
CREATE TABLE `Detalle_Factura`(
	`ID` INT NOT NULL AUTO_INCREMENT,
	`Cantidad` INT NOT NULL,
	`Precio` DOUBLE NOT NULL,
	`Descuento` DOUBLE,
	`Total` DOUBLE NOT NULL,
	`ID_Producto` INT NOT NULL,
	`ID_Factura` INT NOT NULL,
	CONSTRAINT Detalle_Facturapk PRIMARY KEY(ID),
	CONSTRAINT Detalle_Facturafk1 FOREIGN KEY(ID_Producto) REFERENCES Productos(ID) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT Detalle_Facturafk2 FOREIGN KEY(ID_Factura) REFERENCES Facturas(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- TABLA Información general
CREATE TABLE `InfoGeneral` (
	`idinfogeneral` int NOT NULL AUTO_INCREMENT,
	`nombre_negocio` varchar(100) DEFAULT NULL,
	`direccion_negocio` varchar(100) DEFAULT NULL,
	`num_ruc` varchar(45) DEFAULT NULL,
	`nombre_admin` varchar(45) DEFAULT NULL,
	`telefono` varchar(10) DEFAULT NULL,
	PRIMARY KEY (`idinfogeneral`)
);

-- INSERTAR Información Generales

INSERT INTO InfoGeneral VALUES (1,'Ferreteria Luz','Iglesia Sn. Agustin, 80 vrs al S.','12515748412','Meyling Zuniga','8810-9566');

-- INSERTAR Tipos de usuarios

INSERT INTO Tipo_Usuarios VALUES(NULL, 'Administrador');
INSERT INTO Tipo_Usuarios VALUES(NULL, 'Empleado');

-- INSERTAR Usuarios

-- INSERT INTO Usuarios VALUES (NULL,'Kevin Munguia','admin','43919f4c4ba378d5b1e04a408e1f9a10daa88869',1);

INSERT INTO Usuarios VALUES (NULL,'Jeremy','admin','123',1);

INSERT INTO Clientes VALUES (NULL, '--', NULL, NULL, NULL);
-- -----------------------------------------------------------------PROCEDURES-----------------------------------------------------------------

-- INSERTAR Producto

DELIMITER //
	CREATE PROCEDURE Insertar_Producto(_Codigo VARCHAR(45), _Nombre VARCHAR(100), _Existencias INT, _Precio_Compra DOUBLE, _Precio_Venta DOUBLE, _Observacion VARCHAR(200), _ID_Proveedor INT)
	BEGIN
		DECLARE Total FLOAT;
		SET Total = _Precio_Compra * _Existencias;
		INSERT INTO Productos (Codigo, Nombre, Existencias, Precio_Compra, Precio_Venta, Precio_Total, Observacion, ID_Proveedor) VALUES(_Codigo, _Nombre, _Existencias, _Precio_Compra, _Precio_Venta, Total, _Observacion, _ID_Proveedor);
	END//
DELIMITER ;


-- ACTUALIZAR Producto

DELIMITER //
	CREATE PROCEDURE Actualizar_Producto(_ID_Producto INT, _Codigo VARCHAR(45), _Nombre VARCHAR(100), _Existencias INT, _Precio_Compra DOUBLE, _Precio_Venta DOUBLE, _Observacion VARCHAR(200), _ID_Proveedor INT)
	BEGIN
		DECLARE Total FLOAT;
		SET Total = _Precio_Compra * _Existencias;
		UPDATE Productos SET Codigo = _Codigo, Nombre = _Nombre, Existencias = _Existencias, Precio_Compra = _Precio_Compra, Precio_Venta = _Precio_Venta, Precio_Total = Total, Observacion = _Observacion, ID_Proveedor = _ID_Proveedor WHERE ID = _ID_Producto;
	END//
DELIMITER ;


/*
-- Verificar Código del producto
DELIMITER //
	CREATE PROCEDURE Verificar_Codigo(Cod INT))
	BEGIN
		
	END//
DELIMITER ;
*/


INSERT INTO Proveedor VALUES (NULL, 'Pali', '23154365', 'Chinandega', 001);
CALL Insertar_Producto(0001, 'Tornillo', 3, 2.3, 4.0, '--', 1);
CALL Insertar_Producto(0002, 'Martillo', 10, 100.5, 120.0, '--', 1);
CALL Insertar_Producto(0003, 'Cinta', 30, 10.3, 14.0, '--', 1);
CALL Insertar_Producto(0004, 'Alicate', 13, 56.2, 60.0, '--', 1);

-- -----------------------------------------------------------------FACTURACION-----------------------------------------------------------------
		
-- REALIZAR Facturación de los prodcutos con el ID de la factura (Se pasa la cantidad del producto, el precio del producto, el ID del producto y el ID de la factura que creaste)

DELIMITER //
	CREATE PROCEDURE Facturar_Productos(_Cantidad INT, _Precio DOUBLE, _Descuento DOUBLE, _ID_Producto INT, _ID_Factura INT)
	BEGIN
		DECLARE Total DOUBLE;

		IF (_Descuento = 0.00) THEN
			SET Total = _Cantidad * _Precio;
		ELSE 
			SET Total = (_Cantidad * _Precio) - _Descuento;
		END IF;

		INSERT INTO Detalle_Factura VALUES(NULL, _Cantidad, _Precio, _Descuento, Total, _ID_Producto, _ID_Factura);
		UPDATE Productos SET Existencias=(Existencias - _Cantidad) WHERE ID = _ID_Producto;
		UPDATE Productos SET Precio_Total = (Precio_Venta * Existencias) WHERE ID  = _ID_Producto;
		
	END//
DELIMITER ;

/*
DELIMITER //
	CREATE PROCEDURE Insertar_Factura(_Fecha DATETIME, _ID_Usuario INT, _ID_Cliente INT)
	BEGIN
		DECLARE Codigo_Fac INT;
        		IF (SELECT Codigo_Fac FROM Facturas) = 0 THEN 
				INSERT INTO Facturas (Fecha, ID_Usuario, ID_Cliente) VALUES(_Fecha, _ID_Usuario, _ID_Cliente);
				UPDATE Facturas SET Codigo_Fac = Codigo_Fac + 1;
        		ELSE 
				INSERT INTO Facturas (Fecha, ID_Usuario, ID_Cliente) VALUES(_Fecha, _ID_Usuario, _ID_Cliente);
				SET Codigo_Fac = CONVERT((SELECT ID FROM Facturas ORDER BY ID DESC LIMIT 1), UNSIGNED);
				UPDATE Facturas SET Codigo_Fac = Codigo_Fac + 1 WHERE ID = Codigo_Fac;
    			END IF;
	END//
DELIMITER ;
*/

/*
DELIMITER //
	CREATE PROCEDURE Insertar_Factura(_Fecha DATETIME, _ID_Usuario INT, _ID_Cliente INT)
	BEGIN
		DECLARE Aux_Codigo INT;

        	IF (SELECT ID FROM Facturas) IS NULL THEN 
			INSERT INTO Facturas (Codigo_Fac, Fecha, ID_Usuario, ID_Cliente) VALUES(1, _Fecha, _ID_Usuario, _ID_Cliente);
		ELSE
			SET Aux_Codigo = CONVERT((SELECT Codigo_Fac FROM Facturas ORDER BY ID DESC LIMIT 1), UNSIGNED INT);
			SELECT Aux_Codigo;
			INSERT INTO Facturas (Codigo_Fac, Fecha, ID_Usuario, ID_Cliente) VALUES((Aux_Codigo + 1), _Fecha, _ID_Usuario, _ID_Cliente);
		END IF;

	END//
DELIMITER ;
*/

DELIMITER //
	CREATE PROCEDURE Insertar_Factura(_Codigo_Fac INT, _Fecha DATETIME, _ID_Usuario INT, _ID_Cliente INT)
	BEGIN
		INSERT INTO Facturas (Codigo_Fac, Fecha, ID_Usuario, ID_Cliente) VALUES((_Codigo_Fac + 1), _Fecha, _ID_Usuario, _ID_Cliente);

	END//
DELIMITER ;

DELIMITER //
	CREATE PROCEDURE Mostrar_Codigo()
	BEGIN
		DECLARE Aux_Codigo INT;
		SET Aux_Codigo = CONVERT((SELECT Codigo_Fac FROM Facturas ORDER BY ID DESC LIMIT 1), UNSIGNED INT);
		IF (SELECT Aux_Codigo) IS NULL THEN 
			SELECT 0;
		ELSE
			SELECT Aux_Codigo;
		END IF;
	END//
DELIMITER ;

-- INSERT INTO Facturas (Fecha, ID_Usuario, ID_Cliente) VALUES('17/04/23', 1, 1);
-- CALL Insertar_Factura(0, '17/04/23', 1, 1);
-- CALL Mostrar_Codigo();

-- REALIZAR Facturación final (Acá se actualizan los campo añadiendo los campos faltantes de la Factura, se pasa el descuento realizado, el subtotal (Es el total del precio de todos los productos realizados), el efectivo con el que se paga y el ID de la factura)

DELIMITER //
	CREATE PROCEDURE Facturacion_Final(_Descuento DOUBLE, _Subtotal DOUBLE, _Efectivo DOUBLE, _ID_Factura INT)
	BEGIN
		DECLARE Total DOUBLE;
		DECLARE Vuelto DOUBLE;

		IF (_Descuento = 0.00) THEN
			SET Total = _Subtotal;
		ELSE 
			SET Total = _Subtotal - _Descuento;
		END IF;
		SET Vuelto = _Efectivo - Total;
		
		UPDATE Facturas SET Descuento = _Descuento, Subtotal = _Subtotal, Total_Final = Total, Efectivo = _Efectivo, Devolucion = Vuelto WHERE ID = _ID_Factura;

		
	END//
DELIMITER ;


-- Eliminar un producto que no desee facturar y devolver la cantidad del producto.

DELIMITER //
	CREATE PROCEDURE Eliminar_Producto_Facturado(ID_Detalle_Factura INT, ID_Producto INT, _Cantidad INT)
	BEGIN
		UPDATE Productos SET Existencias=(Existencias + _Cantidad) WHERE ID = ID_Producto;
		DELETE FROM Detalle_Factura WHERE ID = ID_Detalle_Factura;
	END//
DELIMITER ;


-- Eliminar factura y detalle facturas 

DELIMITER //
	CREATE PROCEDURE Eliminar_Factura(_ID_Factura INT)
	BEGIN
		DELETE FROM Facturas WHERE ID = _ID_Factura;
		DELETE FROM Detalle_Factura WHERE ID_Factura = _ID_Factura;
	END//
DELIMITER ;


-- Cancelar factura

DELIMITER //
	CREATE PROCEDURE Cancelar_Factura(_ID_Aux INT)
	BEGIN
		UPDATE Facturas SET Codigo_Fac = Codigo_Fac - 1 WHERE ID = _ID_Aux;
	END//
DELIMITER ;



-- -----------------------------------------------------------------CONSULTAS-----------------------------------------------------------------
-- Mostrar todos los productos
CREATE VIEW Mostrar_Producto AS SELECT a.ID, a.Codigo, a.Nombre AS 'Producto', a.Existencias, a.Precio_Compra, a.Precio_Venta, a.Precio_Total, a.Observacion, b.Nombre AS 'Proveedor' FROM Productos a INNER JOIN Proveedor b ON a.ID_Proveedor = b.ID;

-- Sumar los ingresos obtenidos de una determinada fecha
-- SELECT SUM(Total_Final) AS "Total ingresado por fecha" FROM Facturas WHERE DATE_FORMAT(fecha, '%Y/%m/%d') = '2022/08/10';

-- Mostrar todos los datos de la factura segun una determinada fecha
-- SELECT a.ID, b.Nombre, a.Fecha, a.Descuento, a.Cantidad_Descont, a.Subtotal, a.Total_Final, a.Efectivo, a.Devolucion FROM Facturas a INNER JOIN Clientes b ON a.ID_Cliente = b.ID WHERE DATE_FORMAT(a.Fecha, '%Y/%m/%d') = '2022/08/10';

-- Mostrar el nombre del cliente con la fecha según la fecha actual
-- SELECT a.ID, b.Nombre, a.Fecha FROM Facturas a INNER JOIN Clientes b ON a.ID_Cliente = b.ID WHERE DATE_FORMAT(a.Fecha, '%Y/%m/%d') =  DATE_FORMAT(NOW(), '%Y/%m/%d');

-- Mostrar facturación con campos especificos (Rango entre fechas)
DELIMITER //
	CREATE PROCEDURE Rango_Fecha_Between(IN Fec_Inicio DATE, IN Fec_Final DATE)
	BEGIN
		SELECT c.ID, c.Fecha, d.Nombre, SUM(a.cantidad), c.Total_Final, c.Efectivo, c.Devolucion, e.Nombre FROM Detalle_Factura a RIGHT JOIN Productos b ON a.ID_Producto = b.ID RIGHT JOIN Facturas c ON a.ID_Factura = c.ID RIGHT JOIN Clientes d ON c.ID_Cliente = d.ID RIGHT JOIN Usuarios e ON c.ID_Usuario = e.ID WHERE DATE_FORMAT(Fecha, '%Y/%m/%d') BETWEEN Fec_Inicio AND Fec_Final GROUP BY c.ID; 
	END //
DELIMITER ;

-- Mostrar cantidad de facturas realizar en un día determinado
-- SELECT COUNT(ID) FROM Facturas WHERE DATE_FORMAT(Fecha, '%Y/%m/%d') = '2022/08/23';

-- Buscar facturas por nombres de cliente 
-- SELECT a.ID, b.Nombre, a.Fecha, a.Descuento, a.Cantidad_Descont, a.Subtotal, a.Total_Final, a.Efectivo, a.Devolucion FROM Facturas a INNER JOIN Clientes b ON a.ID_Cliente = b.ID WHERE b.Nombre = "Juan Lopez";

-- Buscar facturas por ID de cliente 
-- SELECT a.ID, b.Nombre, a.Fecha, a.Descuento, a.Cantidad_Descont, a.Subtotal, a.Total_Final, a.Efectivo, a.Devolucion FROM Facturas a INNER JOIN Clientes b ON a.ID_Cliente = b.ID WHERE b.ID = 1;

-- Listar todos los detalles de una factura (Productos comprados) de un determinado cliente por su nombre
-- SELECT a.Cantidad, b.Nombre, a.Precio, a.Total FROM Detalle_Factura a INNER JOIN Productos b ON a.ID_Producto = b.ID INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID WHERE d.Nombre = "Juan Lopez";

-- Listar todos los detalles de una factura (Productos comprados) de un determinado cliente por su ID
-- SELECT a.Cantidad, b.Nombre, a.Precio, a.Total FROM Detalle_Factura a INNER JOIN Productos b ON a.ID_Producto = b.ID INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID WHERE d.ID = 1;


-- Mostrar facturación con campos especificos
CREATE VIEW Mostrar_Factura AS SELECT c.ID, c.Fecha, d.Nombre AS 'Nombre cliente', SUM(a.cantidad), c.Total_Final, c.Efectivo, c.Devolucion, e.Nombre AS 'Nombre empleado' FROM Detalle_Factura a INNER JOIN Productos b ON a.ID_Producto = b.ID INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID INNER JOIN Usuarios e ON c.ID_Usuario = e.ID GROUP BY c.ID;


-- Mostrar facturación con campos especificos (Pidiento un mes de referencia)
-- SELECT c.ID, c.Fecha, d.Nombre, SUM(a.cantidad), c.Total_Final, c.Efectivo, c.Devolucion, e.Nombre FROM Detalle_Factura a RIGHT JOIN Productos b ON a.ID_Producto = b.ID RIGHT JOIN Facturas c ON a.ID_Factura = c.ID RIGHT JOIN Clientes d ON c.ID_Cliente = d.ID RIGHT JOIN Usuarios e ON c.ID_Usuario = e.ID WHERE month(fecha) = 8 GROUP BY c.ID;
