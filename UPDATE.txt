USE Prueba2;

ALTER TABLE Productos
MODIFY COLUMN Existencias DOUBLE;
ALTER TABLE Productos
MODIFY COLUMN Existencias_Minimas DOUBLE;

ALTER TABLE Detalle_Compra
MODIFY COLUMN Cantidad DOUBLE;

ALTER TABLE Detalle_Remision
MODIFY COLUMN Cantidad DOUBLE;

ALTER TABLE Detalle_Factura
MODIFY COLUMN Cantidad DOUBLE;

ALTER TABLE Detalle_Devolucion
MODIFY COLUMN Cantidad DOUBLE;

-- ---------------------------------------------------------------- Procedimientos de Productos ----------------------------------------------------------------

DROP PROCEDURE Insertar_Producto;
DELIMITER //
CREATE PROCEDURE Insertar_Producto(
    _Codigo VARCHAR(45),
    _Nombre VARCHAR(300),
    _Existencias DOUBLE,
    _Existencias_Min DOUBLE,
    _Precio_Compra DOUBLE,
    _Precio_Venta DOUBLE,
    _Observacion VARCHAR(200),
    _ID_Entrada INT
)
BEGIN
    DECLARE Total DOUBLE;
    DECLARE Aux_IDProducto INT;
    DECLARE Aux_Estado VARCHAR(30);

    -- Ajustar el tamaño de la columna _Nombre según sea necesario
    IF _Existencias = 0 THEN
        SET Aux_Estado = 'No Activo';
    ELSE
        SET Aux_Estado = 'Activo';
    END IF;

    -- Ajustar la precisión del tipo de dato
    SET Total = ROUND(_Precio_Compra * _Existencias, 2);

    -- Insertar datos en la tabla Productos
    INSERT INTO Productos (Codigo, Nombre, Estado, Existencias, Existencias_Minimas, Precio_Compra, Precio_Venta, Precio_Total, Observacion, ID_Entrada)
    VALUES(_Codigo, _Nombre, Aux_Estado, _Existencias, _Existencias_Min , _Precio_Compra, _Precio_Venta, Total, _Observacion, _ID_Entrada);

END //
DELIMITER ;


DROP PROCEDURE Actualizar_Producto;
DELIMITER //
CREATE PROCEDURE Actualizar_Producto(
    IN _ID_Producto INT,
    IN _Nombre_Producto VARCHAR(300),
    IN _Estado VARCHAR(50),
    IN _Existencias DOUBLE,
    IN _Existencias_Min DOUBLE,
    IN _Precio_Compra DOUBLE,
    IN _Precio_Venta DOUBLE,
    IN _Observacion VARCHAR(200)
)
BEGIN
    DECLARE Total DOUBLE;
    DECLARE Aux_PrecioCompra DOUBLE;
    DECLARE Aux_Existencias DOUBLE;

    -- Obtener el precio de compra actual del producto
    SELECT Precio_Compra INTO Aux_PrecioCompra FROM Productos WHERE ID = _ID_Producto;

    -- Verificar si el nuevo precio de compra es diferente al precio anterior
    IF Aux_PrecioCompra != _Precio_Compra THEN
        -- Insertar un registro en el historial de precios
        INSERT INTO Historial_Precio (ID_Producto, Precio_Antiguo, Precio_Nuevo, Descripcion, Fecha_Cambio) VALUES (_ID_Producto, Aux_PrecioCompra, _Precio_Compra, CONCAT('Se ha cambiado el precio del producto'), NOW());
    END IF;

    -- Actualizar los detalles del producto
    UPDATE Productos 
    SET 
        Estado = _Estado, 
        Nombre = _Nombre_Producto,
		Existencias = Existencias + _Existencias,
        Existencias_Minimas = _Existencias_Min, 
        Precio_Compra = _Precio_Compra, 
        Precio_Venta = _Precio_Venta, 
        Observacion = _Observacion 
    WHERE ID = _ID_Producto;

	SELECT Existencias INTO Aux_Existencias FROM Productos WHERE ID = _ID_Producto;
    -- Calcular el nuevo valor para Precio_Total
    SET Total = ROUND(_Precio_Compra * Aux_Existencias, 2);

    -- Actualizar el Precio_Total y Existencias
    UPDATE Productos SET 
        Precio_Total = Total -- Cambiado aquí
    WHERE ID = _ID_Producto;
    
END //
DELIMITER ;



-- ------------------------------------------------------------ Procedimientos de remisión de productos------------------------------------------------------------

DROP PROCEDURE Detalle_RemisionEntrada;
DELIMITER //
CREATE PROCEDURE Detalle_RemisionEntrada(
    IN _ID_Producto INT,
    IN _Codigo_Producto VARCHAR(45),
    IN _Nombre_Producto VARCHAR(100),
    IN _Cantidad DOUBLE,
    IN _Existencias_Min DOUBLE,
    IN _Precio_Compra DOUBLE,
    IN _Precio_Venta DOUBLE,
    IN _Observacion VARCHAR(200),
    IN _ID_Remision INT
)
BEGIN
    DECLARE Aux_IDProducto INT;

    -- Verificar si el dato ya existe en la tabla Productos
    SELECT ID INTO Aux_IDProducto FROM Productos WHERE ID = _ID_Producto;

    -- Comprobar el resultado
    IF Aux_IDProducto != 0 THEN
        CALL Actualizar_Producto(_ID_Producto, _Nombre_Producto, 'Activo', _Cantidad, _Existencias_Min, _Precio_Compra, _Precio_Venta, _Observacion);
    ELSE
        CALL Insertar_Producto(_Codigo_Producto, _Nombre_Producto, _Cantidad, _Existencias_Min, _Precio_Compra, _Precio_Venta, _Observacion, 2);
        -- Obtener el ID del último producto insertado
       SET Aux_IDProducto = LAST_INSERT_ID();
    END IF;

    -- Insertar en la tabla Detalle_Remisiones
    INSERT INTO Detalle_Remision (Cantidad, ID_Remision, ID_Producto)
    VALUES (_Cantidad, _ID_Remision, Aux_IDProducto);
    
    INSERT INTO HistorialTransacciones VALUES (NULL, 'Remision de entrada', NOW(), CONCAT('Se ha hecho una transacción de entrada de productos mediante una remisión de entrada de ', _Cantidad, ' ', _Nombre_Producto));
END //
DELIMITER ;


DROP PROCEDURE Detalle_RemisionSalida;
DELIMITER //
CREATE PROCEDURE Detalle_RemisionSalida(
    IN _ID_Producto INT,
    IN _Nombre_Producto VARCHAR(100),
    IN _Cantidad DOUBLE,
    IN _ID_Remision INT
)
BEGIN
		DECLARE productoExistencias INT;
		DECLARE Aux_ID_DetalleFactura INT;
 
		-- Iniciar una transacción
		START TRANSACTION;

		-- Obtener existencias actuales del producto
		SELECT Existencias INTO productoExistencias FROM Productos WHERE ID = _ID_Producto;

		-- Verificar si hay suficientes existencias para la venta
		IF productoExistencias >= _Cantidad THEN
			-- Registrar la venta en Detalle_Factura
			
			INSERT INTO Detalle_Remision (Cantidad, ID_Remision, ID_Producto) VALUES (_Cantidad, _ID_Remision, _ID_Producto);

			INSERT INTO HistorialTransacciones VALUES (NULL, 'Remision de salida', NOW(), CONCAT('Se ha hecho una transacción de salida de productos mediante una remisión de salida de ', _Cantidad, ' ', _Nombre_Producto));
			
			-- Actualizar existencias y precio total
			UPDATE Productos SET Existencias = Existencias - _Cantidad WHERE ID = _ID_Producto;
			UPDATE Productos SET Precio_Total =  (Precio_Compra * Existencias) WHERE ID = _ID_Producto;

			-- Verificar si las existencias se han agotado
			IF (productoExistencias - _Cantidad) = 0 THEN
				UPDATE Productos SET Estado = 'No activo' WHERE ID = _ID_Producto;
			END IF;

			-- Confirmar la transacción
			COMMIT;
		ELSE
			-- Si no hay suficientes existencias, revertir la transacción
			ROLLBACK;
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'No hay suficientes existencias para esta venta.';
		END IF;
	END //
DELIMITER ;

-- ------------------------------------------------------------ Procedimientos de compras de productos------------------------------------------------------------

DROP PROCEDURE Productos_Comprados;
DELIMITER //
CREATE PROCEDURE Productos_Comprados(
    IN _ID_Producto INT,
    IN _Codigo_Producto VARCHAR(45),
    IN _Nombre_Producto VARCHAR(100),
    IN _Cantidad DOUBLE,
    IN _Existencias_Min DOUBLE,
    IN _Precio_Compra DOUBLE,
    IN _Precio_Venta DOUBLE,
    IN _Observacion VARCHAR(200),
	IN _ID_Compra INT
)
BEGIN
    DECLARE Aux_IDProducto INT;

    -- Verificar si el producto ya existe en la tabla Productos
    SELECT ID INTO Aux_IDProducto FROM Productos WHERE ID = _ID_Producto;

    -- Comprobar el resultado
    IF Aux_IDProducto IS NOT NULL THEN
        -- Si el producto existe, actualizarlo
		CALL Actualizar_Producto(_ID_Producto, _Nombre_Producto, 'Activo', _Cantidad, _Existencias_Min, _Precio_Compra, _Precio_Venta, _Observacion);
    ELSE
        -- Si el producto no existe, insertarlo
        CALL Insertar_Producto(_Codigo_Producto, _Nombre_Producto, _Cantidad, _Existencias_Min, _Precio_Compra, _Precio_Venta, _Observacion, 1);
        -- Obtener el ID del producto recién insertado
        SET Aux_IDProducto = LAST_INSERT_ID();
    END IF;

    -- Insertar en la tabla Detalle_Compra
    INSERT INTO Detalle_Compra (Cantidad, ID_Compra, ID_Producto) VALUES (_Cantidad, _ID_Compra, Aux_IDProducto);
	INSERT INTO HistorialTransacciones VALUES (NULL, 'Remision de entrada', NOW(), CONCAT('Se ha hecho una transacción de entrada de productos de mendiante una compra de ', _Cantidad, '  ', _Nombre_Producto));
END //
DELIMITER ;


-- ---------------------------------------------------------------- Procedimientos de facturación ----------------------------------------------------------------

DROP PROCEDURE Facturar_Productos;
DELIMITER //
CREATE PROCEDURE Facturar_Productos(
    IN _Cantidad DOUBLE,
	IN _Descripcion VARCHAR(200),
    IN _ID_Factura INT,
    IN _ID_Producto INT
)
BEGIN
    DECLARE productoExistencias DOUBLE;
    DECLARE Aux_ID_DetalleFactura INT;
	DECLARE Aux_NombreProducto VARCHAR(100);
 
    -- Iniciar una transacción
    START TRANSACTION;

    -- Obtener existencias actuales del producto
    SELECT Existencias INTO productoExistencias FROM Productos WHERE ID = _ID_Producto;
	SELECT Nombre INTO Aux_NombreProducto FROM Productos WHERE ID = _ID_Producto;

    -- Verificar si hay suficientes existencias para la venta
    IF productoExistencias >= _Cantidad THEN
        -- Registrar la venta en Detalle_Factura
        INSERT INTO Detalle_Factura (Cantidad, Descripcion, ID_Factura, ID_Producto) VALUES (_Cantidad, _Descripcion, _ID_Factura, _ID_Producto);
		SET Aux_ID_DetalleFactura = LAST_INSERT_ID();
		
        -- Actualizar existencias y precio total
        UPDATE Productos SET Existencias = (Existencias - _Cantidad) WHERE ID = _ID_Producto;
		UPDATE Productos SET Precio_Total =  (Precio_Compra * Existencias) WHERE ID = _ID_Producto;
		
        -- Verificar si las existencias se han agotado
        IF (productoExistencias - _Cantidad) = 0 THEN
            UPDATE Productos SET Estado = 'No activo' WHERE ID = _ID_Producto;
        END IF;
	
		INSERT INTO HistorialTransacciones VALUES (NULL, 'Facturacion', NOW(), CONCAT('Se ha hecho una transacción de salida de productos de mendiante una facturacion de ', _Cantidad, '  ', Aux_NombreProducto));
			
        -- Confirmar la transacción
        COMMIT;
    ELSE
        -- Si no hay suficientes existencias, revertir la transacción
        ROLLBACK;
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No hay suficientes existencias para esta venta.';
    END IF;
END //
DELIMITER ;
 

-- ---------------------------------------------------------------- Procedimientos de devoluciones ----------------------------------------------------------------


DROP PROCEDURE Devolver_Productos;
DELIMITER //
	CREATE PROCEDURE Devolver_Productos(
		IN _Cantidad DOUBLE,
		IN _ID_Devolucion INT,
		IN _ID_Producto INT,
		IN _ID_Factura INT
	)
	BEGIN
		DECLARE Total_Prod DOUBLE;
		DECLARE Aux_Precio DOUBLE;
		DECLARE Aux_ID_Devolucion INT;
		DECLARE Aux_NombreProducto VARCHAR(200);

		-- Verificar si existe la devolución con el ID proporcionado
		SELECT ID INTO Aux_ID_Devolucion FROM Devoluciones WHERE ID = _ID_Devolucion;

		-- Verificar si hay una relación válida con la devolución y la factura
		IF Aux_ID_Devolucion IS NOT NULL AND (SELECT COUNT(*) FROM Detalle_Factura WHERE ID_Factura = _ID_Factura AND ID_Producto = _ID_Producto) > 0 THEN
			-- Iniciar una transacción
			START TRANSACTION;

			-- Obtener el precio de compra del producto
			SELECT Precio_Compra INTO Aux_Precio FROM Productos WHERE ID = _ID_Producto;
			SELECT Nombre INTO Aux_NombreProducto FROM Productos WHERE ID = _ID_Producto;

			-- Calcular el Total_Producto
			SET Total_Prod = Aux_Precio * _Cantidad;

			-- Insertar en Detalle_Devolucion
			INSERT INTO Detalle_Devolucion (Cantidad, ID_Devolucion, ID_Producto) VALUES (_Cantidad, _ID_Devolucion, _ID_Producto);

			-- Actualizar existencias, precio total y estado en Productos
			UPDATE Productos
			SET Existencias = Existencias + _Cantidad, Precio_Total = Precio_Total + Total_Prod, Estado = 'Activo'
			WHERE ID = _ID_Producto;

			-- Actualizar Detalle_Factura
			UPDATE Detalle_Factura SET Cantidad = Cantidad - _Cantidad WHERE ID_Producto = _ID_Producto AND ID_Factura = _ID_Factura;
			
			INSERT INTO HistorialTransacciones VALUES (NULL, 'Devolucion', NOW(), CONCAT('Se ha hecho una transacción de entrada de productos de mendiante una devolución de ', _Cantidad, '  ', Aux_NombreProducto));

			-- Confirmar la transacción
			COMMIT;
		ELSE
			-- Si no hay una devolución válida relacionada o la factura no existe
			ROLLBACK;
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'No hay relación válida con esa devolución o la factura no existe.';
		END IF;
	END //
DELIMITER ;
