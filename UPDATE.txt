USE Prueba2;

-- ---------------------------------------------------------------- Procedimientos de Productos ----------------------------------------------------------------

DROP PROCEDURE Insertar_Producto;
DELIMITER //
CREATE PROCEDURE Insertar_Producto(
    _Codigo VARCHAR(45),
    _Nombre VARCHAR(300),
    _Existencias INT,
    _Existencias_Min INT,
    _Precio_Compra DOUBLE,
    _Precio_Venta DOUBLE,
    _Observacion VARCHAR(200),
    _ID_Entrada INT
)
BEGIN
    DECLARE Total DOUBLE;
    DECLARE Aux_IDProducto INT;
    DECLARE Aux_Estado VARCHAR(30);

    -- Ajustar el tamaño de la columna _Nombre según sea necesario
    IF _Existencias = 0 THEN
        SET Aux_Estado = 'No Activo';
    ELSE
        SET Aux_Estado = 'Activo';
    END IF;

    -- Ajustar la precisión del tipo de dato
    SET Total = ROUND(_Precio_Compra * _Existencias, 2);

    -- Insertar datos en la tabla Productos
    INSERT INTO Productos (Codigo, Nombre, Estado, Existencias, Existencias_Minimas, Precio_Compra, Precio_Venta, Precio_Total, Observacion, ID_Entrada)
    VALUES(_Codigo, _Nombre, Aux_Estado, _Existencias, _Existencias_Min , _Precio_Compra, _Precio_Venta, Total, _Observacion, _ID_Entrada);

END //
DELIMITER ;


DROP PROCEDURE Actualizar_Producto;
DELIMITER //
CREATE PROCEDURE Actualizar_Producto(
    IN _ID_Producto INT,
    IN _Nombre_Producto VARCHAR(300),
    IN _Estado VARCHAR(50),
    IN _Existencias INT,
    IN _Existencias_Min INT,
    IN _Precio_Compra DOUBLE,
    IN _Precio_Venta DOUBLE,
    IN _Observacion VARCHAR(200)
)
BEGIN
    DECLARE Total DOUBLE;
    DECLARE Aux_PrecioCompra DOUBLE;
    DECLARE Aux_Existencias INT;

    -- Obtener el precio de compra actual del producto
    SELECT Precio_Compra INTO Aux_PrecioCompra FROM Productos WHERE ID = _ID_Producto;

    -- Verificar si el nuevo precio de compra es diferente al precio anterior
    IF Aux_PrecioCompra != _Precio_Compra THEN
        -- Insertar un registro en el historial de precios
        INSERT INTO Historial_Precio (ID_Producto, Precio_Antiguo, Precio_Nuevo, Descripcion, Fecha_Cambio) VALUES (_ID_Producto, Aux_PrecioCompra, _Precio_Compra, CONCAT('Se ha cambiado el precio del producto'), NOW());
    END IF;

    -- Actualizar los detalles del producto
    UPDATE Productos 
    SET 
        Estado = _Estado, 
        Nombre = _Nombre_Producto,
		Existencias = Existencias + _Existencias,
        Existencias_Minimas = _Existencias_Min, 
        Precio_Compra = _Precio_Compra, 
        Precio_Venta = _Precio_Venta, 
        Observacion = _Observacion 
    WHERE ID = _ID_Producto;

	SELECT Existencias INTO Aux_Existencias FROM Productos WHERE ID = _ID_Producto;
    -- Calcular el nuevo valor para Precio_Total
    SET Total = ROUND(_Precio_Compra * Aux_Existencias, 2);

    -- Actualizar el Precio_Total y Existencias
    UPDATE Productos SET 
        Precio_Total = Total -- Cambiado aquí
    WHERE ID = _ID_Producto;
    
END //
DELIMITER ;


-- ------------------------------------------------------------ Procedimientos de remisión de productos------------------------------------------------------------

DROP PROCEDURE Realizar_Remision;
DELIMITER //
CREATE PROCEDURE Realizar_Remision(
    IN _Descripcion VARCHAR(200),
    IN _Tipo_Remision VARCHAR(200),
	IN _ID_Usuario INT
)
BEGIN
    -- Insertar en la tabla Remisiones
    INSERT INTO Remisiones (Descripcion, Fecha, ID_Usuario, Tipo_Remision) VALUES (_Descripcion, NOW(), _ID_Usuario, _Tipo_Remision);
END //
DELIMITER ;


DROP PROCEDURE Detalle_RemisionEntrada;
DELIMITER //
CREATE PROCEDURE Detalle_RemisionEntrada(
    IN _ID_Producto INT,
    IN _Codigo_Producto VARCHAR(45),
    IN _Nombre_Producto VARCHAR(100),
    IN _Cantidad INT,
    IN _Existencias_Min INT,
    IN _Precio_Compra DOUBLE,
    IN _Precio_Venta DOUBLE,
    IN _Observacion VARCHAR(200),
    IN _ID_Remision INT
)
BEGIN
    DECLARE Aux_IDProducto INT;

    -- Verificar si el dato ya existe en la tabla Productos
    SELECT ID INTO Aux_IDProducto FROM Productos WHERE ID = _ID_Producto;

    -- Comprobar el resultado
    IF Aux_IDProducto != 0 THEN
        CALL Actualizar_Producto(_ID_Producto, _Nombre_Producto, 'Activo', _Cantidad, _Existencias_Min, _Precio_Compra, _Precio_Venta, _Observacion);
    ELSE
        CALL Insertar_Producto(_Codigo_Producto, _Nombre_Producto, _Cantidad, _Existencias_Min, _Precio_Compra, _Precio_Venta, _Observacion, 2);
        -- Obtener el ID del último producto insertado
       SET Aux_IDProducto = LAST_INSERT_ID();
    END IF;

    -- Insertar en la tabla Detalle_Remisiones
    INSERT INTO Detalle_Remision (Cantidad, ID_Remision, ID_Producto)
    VALUES (_Cantidad, _ID_Remision, Aux_IDProducto);
    
    INSERT INTO HistorialTransacciones VALUES (NULL, 'Remision de entrada', NOW(), CONCAT('Se ha hecho una transacción de entrada de productos mediante una remisión de entrada de ', _Cantidad, ' ', _Nombre_Producto));
END //
DELIMITER ;


DROP PROCEDURE Detalle_RemisionSalida;
DELIMITER //
CREATE PROCEDURE Detalle_RemisionSalida(
    IN _ID_Producto INT,
    IN _Nombre_Producto VARCHAR(100),
    IN _Cantidad INT,
    IN _ID_Remision INT
)
BEGIN
		DECLARE productoExistencias INT;
		DECLARE Aux_ID_DetalleFactura INT;
 
		-- Iniciar una transacción
		START TRANSACTION;

		-- Obtener existencias actuales del producto
		SELECT Existencias INTO productoExistencias FROM Productos WHERE ID = _ID_Producto;

		-- Verificar si hay suficientes existencias para la venta
		IF productoExistencias >= _Cantidad THEN
			-- Registrar la venta en Detalle_Factura
			
			INSERT INTO Detalle_Remision (Cantidad, ID_Remision, ID_Producto) VALUES (_Cantidad, _ID_Remision, _ID_Producto);

			INSERT INTO HistorialTransacciones VALUES (NULL, 'Remision de salida', NOW(), CONCAT('Se ha hecho una transacción de salida de productos mediante una remisión de salida de ', _Cantidad, ' ', _Nombre_Producto));
			
			-- Actualizar existencias y precio total
			UPDATE Productos SET Existencias = Existencias - _Cantidad WHERE ID = _ID_Producto;
			UPDATE Productos SET Precio_Total =  (Precio_Compra * Existencias) WHERE ID = _ID_Producto;

			-- Verificar si las existencias se han agotado
			IF (productoExistencias - _Cantidad) = 0 THEN
				UPDATE Productos SET Estado = 'No activo' WHERE ID = _ID_Producto;
			END IF;

			-- Confirmar la transacción
			COMMIT;
		ELSE
			-- Si no hay suficientes existencias, revertir la transacción
			ROLLBACK;
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'No hay suficientes existencias para esta venta.';
		END IF;
	END //
DELIMITER ;


-- ------------------------------------------------------------ Procedimientos de compras de productos------------------------------------------------------------

DROP PROCEDURE Realizar_Compra;
DELIMITER //
CREATE PROCEDURE Realizar_Compra(
    IN _Nombre_Vendedor VARCHAR(200),
    IN _Subtotal DOUBLE,
    IN _Descuento DOUBLE,
    IN _IVA DOUBLE,
    IN _Descripcion VARCHAR(200),
    IN _Estado VARCHAR(50),
    IN _ID_Usuario INT,
    IN _ID_Proveedor INT,
    IN _ID_TipoPagos INT
)
BEGIN
    DECLARE SubtotalConIVA DOUBLE;
    DECLARE Total DOUBLE;

    -- Calcular el Subtotal con IVA si el IVA es mayor que 0
    IF _IVA > 0 THEN
        SET SubtotalConIVA = _Subtotal + (_Subtotal * (_IVA / 100));
    ELSE
        SET SubtotalConIVA = _Subtotal;
    END IF;

    -- Calcular el Total con Descuento si el Descuento es mayor que 0
    IF _Descuento > 0 THEN
        SET Total = SubtotalConIVA - (SubtotalConIVA * (_Descuento / 100));
    ELSE
        SET Total = SubtotalConIVA;
    END IF;

    -- Insertar la compra en la tabla Compras
    INSERT INTO Compras (Fecha, Nombre_Vendedor, Descripcion, Estado, Subtotal,  Descuento, IVA, Total_Final, ID_Usuario, ID_Proveedor, ID_TiposPago) VALUES (NOW(), _Nombre_Vendedor,  _Descripcion, _Estado, _Subtotal,  _Descuento,  _IVA, Total, _ID_Usuario, _ID_Proveedor, _ID_TipoPagos);
END //
DELIMITER ;


DROP PROCEDURE CambiarProveedorProducto;
DELIMITER //
CREATE PROCEDURE CambiarProveedorProducto(
    IN _ID_Producto INT,
	IN _Cantidad INT,
	IN _ID_Proveedor INT,
	IN _ID_Compra INT
)
BEGIN
	DECLARE Aux_NombreProducto VARCHAR(200);
	DECLARE Aux_NombreProveedor VARCHAR(200);

    SELECT Nombre INTO Aux_NombreProducto FROM Productos WHERE ID = _ID_Producto;
    SELECT Nombre INTO Aux_NombreProveedor FROM Proveedor WHERE ID = _ID_Proveedor;
	
	UPDATE Productos SET ID_Entrada = 1 WHERE ID = _ID_Producto;
	
    INSERT INTO Detalle_Compra (Cantidad, ID_Compra, ID_Producto) VALUES (_Cantidad, _ID_Compra, _ID_Producto);
	INSERT INTO HistorialTransacciones VALUES (NULL, 'Cambio a proveedor', NOW(), CONCAT('Se ha hecho un cambio al proveedor ', Aux_NombreProveedor, ' de ', _Cantidad, '  ', Aux_NombreProducto));
END //
DELIMITER ;


DROP PROCEDURE Productos_Comprados;
DELIMITER //
CREATE PROCEDURE Productos_Comprados(
    IN _ID_Producto INT,
    IN _Codigo_Producto VARCHAR(45),
    IN _Nombre_Producto VARCHAR(100),
    IN _Cantidad INT,
    IN _Existencias_Min INT,
    IN _Precio_Compra DOUBLE,
    IN _Precio_Venta DOUBLE,
    IN _Observacion VARCHAR(200),
	IN _ID_Compra INT
)
BEGIN
    DECLARE Aux_IDProducto INT;

    -- Verificar si el producto ya existe en la tabla Productos
    SELECT ID INTO Aux_IDProducto FROM Productos WHERE ID = _ID_Producto;

    -- Comprobar el resultado
    IF Aux_IDProducto IS NOT NULL THEN
        -- Si el producto existe, actualizarlo
		CALL Actualizar_Producto(_ID_Producto, _Nombre_Producto, 'Activo', _Cantidad, _Existencias_Min, _Precio_Compra, _Precio_Venta, _Observacion);
    ELSE
        -- Si el producto no existe, insertarlo
        CALL Insertar_Producto(_Codigo_Producto, _Nombre_Producto, _Cantidad, _Existencias_Min, _Precio_Compra, _Precio_Venta, _Observacion, 1);
        -- Obtener el ID del producto recién insertado
        SET Aux_IDProducto = LAST_INSERT_ID();
    END IF;

    -- Insertar en la tabla Detalle_Compra
    INSERT INTO Detalle_Compra (Cantidad, ID_Compra, ID_Producto) VALUES (_Cantidad, _ID_Compra, Aux_IDProducto);
	INSERT INTO HistorialTransacciones VALUES (NULL, 'Remision de entrada', NOW(), CONCAT('Se ha hecho una transacción de entrada de productos de mendiante una compra de ', _Cantidad, '  ', _Nombre_Producto));
END //
DELIMITER ;


-- ---------------------------------------------------------------- Procedimientos de facturación ----------------------------------------------------------------

DROP PROCEDURE Facturacion_Final;
DELIMITER //

CREATE PROCEDURE Facturacion_Final(
    IN _Estado VARCHAR(50),
    IN _Descuento DOUBLE,
    IN _Subtotal DOUBLE,
    IN _Efectivo DOUBLE,
    IN _Debe DOUBLE,
    IN _TipoFactura VARCHAR(50), 
	IN _Referencia VARCHAR(300),
    IN _ID_Usuario INT,
    IN _ID_Cliente INT,
    IN _ID_TipoPagos INT
)
BEGIN
    DECLARE Total DOUBLE;
    DECLARE Vuelto DOUBLE;

    IF (_TipoFactura = 'Al contado') THEN
        IF (_Descuento = 0.00) THEN
                SET Total = _Subtotal;
         ELSE
             SET Total = _Subtotal - _Descuento;
         END IF;
        SET Vuelto = _Efectivo - Total;
    ELSE
        SET Total = _Subtotal;        
        SET Vuelto = 0.00;
    END IF;
        
    INSERT INTO Facturas (Estado, Fecha, Descuento, Subtotal, Total_Final, Efectivo, Devolucion, Debe, Tipo_Factura, Referencia, ID_Usuario, ID_Cliente, ID_TiposPago) VALUES(_Estado, (NOW()), _Descuento, _Subtotal, Total, _Efectivo, Vuelto, _Debe, _TipoFactura, _Referencia, _ID_Usuario, _ID_Cliente, _ID_TipoPagos);
END //
DELIMITER ;


DROP PROCEDURE Facturar_Productos;
DELIMITER //
CREATE PROCEDURE Facturar_Productos(
    IN _Cantidad INT,
	IN _Descripcion VARCHAR(200),
    IN _ID_Factura INT,
    IN _ID_Producto INT
)
BEGIN
    DECLARE productoExistencias INT;
    DECLARE Aux_ID_DetalleFactura INT;
	DECLARE Aux_NombreProducto VARCHAR(100);
 
    -- Iniciar una transacción
    START TRANSACTION;

    -- Obtener existencias actuales del producto
    SELECT Existencias INTO productoExistencias FROM Productos WHERE ID = _ID_Producto;
	SELECT Nombre INTO Aux_NombreProducto FROM Productos WHERE ID = _ID_Producto;

    -- Verificar si hay suficientes existencias para la venta
    IF productoExistencias >= _Cantidad THEN
        -- Registrar la venta en Detalle_Factura
        INSERT INTO Detalle_Factura (Cantidad, Descripcion, ID_Factura, ID_Producto) VALUES (_Cantidad, _Descripcion, _ID_Factura, _ID_Producto);
		SET Aux_ID_DetalleFactura = LAST_INSERT_ID();
		
        -- Actualizar existencias y precio total
        UPDATE Productos SET Existencias = (Existencias - _Cantidad) WHERE ID = _ID_Producto;
		UPDATE Productos SET Precio_Total =  (Precio_Compra * Existencias) WHERE ID = _ID_Producto;
		
        -- Verificar si las existencias se han agotado
        IF (productoExistencias - _Cantidad) = 0 THEN
            UPDATE Productos SET Estado = 'No activo' WHERE ID = _ID_Producto;
        END IF;
	
		INSERT INTO HistorialTransacciones VALUES (NULL, 'Facturacion', NOW(), CONCAT('Se ha hecho una transacción de salida de productos de mendiante una facturacion de ', _Cantidad, '  ', Aux_NombreProducto));
			
        -- Confirmar la transacción
        COMMIT;
    ELSE
        -- Si no hay suficientes existencias, revertir la transacción
        ROLLBACK;
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No hay suficientes existencias para esta venta.';
    END IF;
END //
DELIMITER ;


DROP PROCEDURE Anular_Factura;
DELIMITER //
CREATE PROCEDURE Anular_Factura(
    IN _Cantidad INT,
    IN _ID_Producto INT,
    IN _ID_Factura INT
)
	BEGIN
		DECLARE Total_Prod DOUBLE;
		DECLARE Aux_Precio DOUBLE;

		-- Iniciar una transacción
		START TRANSACTION;
		SELECT Precio_Compra INTO Aux_Precio FROM Productos WHERE ID = _ID_Producto;

		-- Calcular el Total_Producto
		SET Total_Prod =  Aux_Precio * _Cantidad;

		-- Actualizar Cantidad y Total en Detalle_Factura
		UPDATE Detalle_Factura SET Cantidad = Cantidad - _Cantidad WHERE ID_Factura = _ID_Factura AND ID_Producto = _ID_Producto;
		
		-- Confirmar la transacción
		COMMIT;
	END //
DELIMITER ;


DROP PROCEDURE Actualizar_FacturaAnulada;
DELIMITER //
	CREATE PROCEDURE Actualizar_FacturaAnulada(_Desc VARCHAR(200), _ID_Factura INT)
	BEGIN
		UPDATE Facturas SET 
			Estado = 'Anulada', 
			Descuento = 0.00, 
			Subtotal = 0.00, 
			Total_Final = 0.00,
			Efectivo = 0.00,
			Debe = 0.00,
			Devolucion = 0.00,
			Tipo_Factura = '--' WHERE ID = _ID_Factura;

			INSERT INTO Facturas_Anuladas VALUES(NULL, _Desc, _ID_Factura);

			IF (SELECT ID FROM Credito WHERE ID_Factura = _ID_Factura) IS NOT NULL THEN
				DELETE FROM Credito WHERE ID_Factura = _ID_Factura;
			END IF;

			DELETE FROM Detalle_Factura WHERE ID_Factura = _ID_Factura;
	END//
DELIMITER ;


-- ---------------------------------------------------------------- Procedimientos de devoluciones ----------------------------------------------------------------

DROP PROCEDURE Agregar_Devolucion;
DELIMITER //
CREATE PROCEDURE Agregar_Devolucion(_Desc VARCHAR(200), _ID_Factura INT)
BEGIN
    -- Verificar si la factura con _ID_Factura existe
    IF (SELECT COUNT(*) FROM Facturas WHERE ID = _ID_Factura) > 0 THEN
        INSERT INTO Devoluciones VALUES(NULL, NOW(), _Desc, _ID_Factura);
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'La factura especificada no existe.';
    END IF;
END //
DELIMITER ;

DROP PROCEDURE Devolver_Productos;
DELIMITER //
	CREATE PROCEDURE Devolver_Productos(
		IN _Cantidad INT,
		IN _ID_Devolucion INT,
		IN _ID_Producto INT,
		IN _ID_Factura INT
	)
	BEGIN
		DECLARE Total_Prod DOUBLE;
		DECLARE Aux_Precio DOUBLE;
		DECLARE Aux_ID_Devolucion INT;
		DECLARE Aux_NombreProducto VARCHAR(200);

		-- Verificar si existe la devolución con el ID proporcionado
		SELECT ID INTO Aux_ID_Devolucion FROM Devoluciones WHERE ID = _ID_Devolucion;

		-- Verificar si hay una relación válida con la devolución y la factura
		IF Aux_ID_Devolucion IS NOT NULL AND (SELECT COUNT(*) FROM Detalle_Factura WHERE ID_Factura = _ID_Factura AND ID_Producto = _ID_Producto) > 0 THEN
			-- Iniciar una transacción
			START TRANSACTION;

			-- Obtener el precio de compra del producto
			SELECT Precio_Compra INTO Aux_Precio FROM Productos WHERE ID = _ID_Producto;
			SELECT Nombre INTO Aux_NombreProducto FROM Productos WHERE ID = _ID_Producto;

			-- Calcular el Total_Producto
			SET Total_Prod = Aux_Precio * _Cantidad;

			-- Insertar en Detalle_Devolucion
			INSERT INTO Detalle_Devolucion (Cantidad, ID_Devolucion, ID_Producto) VALUES (_Cantidad, _ID_Devolucion, _ID_Producto);

			-- Actualizar existencias, precio total y estado en Productos
			UPDATE Productos
			SET Existencias = Existencias + _Cantidad, Precio_Total = Precio_Total + Total_Prod, Estado = 'Activo'
			WHERE ID = _ID_Producto;

			-- Actualizar Detalle_Factura
			UPDATE Detalle_Factura SET Cantidad = Cantidad - _Cantidad WHERE ID_Producto = _ID_Producto AND ID_Factura = _ID_Factura;
			
			INSERT INTO HistorialTransacciones VALUES (NULL, 'Devolucion', NOW(), CONCAT('Se ha hecho una transacción de entrada de productos de mendiante una devolución de ', _Cantidad, '  ', Aux_NombreProducto));

			-- Confirmar la transacción
			COMMIT;
		ELSE
			-- Si no hay una devolución válida relacionada o la factura no existe
			ROLLBACK;
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'No hay relación válida con esa devolución o la factura no existe.';
		END IF;
	END //
DELIMITER ;

DROP PROCEDURE Actualizar_facturacion;
DELIMITER //
CREATE PROCEDURE Actualizar_facturacion(_ID_Devolucion INT, _ID_Factura INT)
BEGIN
    DECLARE Aux_Total DOUBLE;

    -- Verificar si la devolución está relacionada con la factura _ID_Factura
    SELECT SUM(a.Precio_Venta * b.Cantidad) INTO Aux_Total
    FROM Productos a
    INNER JOIN Detalle_Devolucion b ON a.ID = b.ID_Producto
    INNER JOIN Devoluciones c ON b.ID_Devolucion = c.ID
    WHERE c.ID = _ID_Devolucion AND c.ID_Factura = _ID_Factura;

    IF Aux_Total IS NOT NULL THEN
        -- Actualizar los valores en la factura
        UPDATE Facturas
        SET
            Subtotal = Subtotal - Aux_Total,
            Total_Final = Total_Final - Aux_Total
        WHERE ID = _ID_Factura;

        -- Calcular la Devolución y actualizar la Devolución en la factura
        UPDATE Facturas
        SET Devolucion =  Efectivo - Total_Final
        WHERE ID = _ID_Factura;
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'La devolución no está relacionada con la factura especificada.';
    END IF;
END //
DELIMITER ;

DROP  PROCEDURE Verificar_Devolucion;
DELIMITER //
CREATE PROCEDURE Verificar_Devolucion(_ID_Factura INT)
BEGIN
    DECLARE Aux INT;

    -- Verificar si existe una devolución para la factura especificada
    SELECT COUNT(*) INTO Aux FROM Devoluciones WHERE ID_Factura = _ID_Factura;

    -- Devolver 1 si hay una devolución, 0 si no la hay
    SELECT IF(Aux > 0, 1, 0) AS Resultado;
END //
DELIMITER ;

-- ---------------------------------------------------------------- Procedimientos de Créditos y abonos ---------------------------------------------------------------

DROP PROCEDURE Agregar_Credito;
DELIMITER //
	CREATE PROCEDURE Agregar_Credito(
		IN _DiaDeInicio DATE,
		IN _DiaDeVencimiento DATE,
		IN _Cargo DOUBLE,
		IN _Estado VARCHAR(50),
		IN _Desc VARCHAR(400),
		IN _ID_Factura INT,
		IN _ID_Cliente INT,
		IN _ID_TipoPagos INT
	)
	BEGIN
		-- Actualizar el tipo de pago en la factura
		UPDATE Facturas SET ID_TiposPago = _ID_TipoPagos WHERE ID = _ID_Factura;

		-- Insertar información de crédito
		INSERT INTO Credito (DiaDeCredito, DiaDeVencimiento, Cargo, Estado, Descripcion, ID_Factura, ID_Cliente)
		VALUES (_DiaDeInicio, _DiaDeVencimiento, _Cargo, _Estado, _Desc, _ID_Factura, _ID_Cliente);
		
		-- Comprobar si se ha insertado correctamente el crédito
		IF (SELECT ROW_COUNT()) > 0 THEN
			SELECT 'Crédito agregado con éxito.';
		ELSE
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Error al agregar el crédito.';
		END IF;
	END //
DELIMITER ;


DROP PROCEDURE Realziar_Abono;
DELIMITER //
	CREATE PROCEDURE Realziar_Abono(
		IN _Monto DOUBLE,
		IN _Saldo_ante DOUBLE,
		IN _Saldo_nuevo DOUBLE,
		IN _Desc VARCHAR(100),
		IN _ID_Credito INT,
		IN _ID_Factura INT
	)
	BEGIN
		-- Insertar el registro de abono
		INSERT INTO Abono (Fecha, Monto, Saldo_Anterior, Saldo_Nuevo, Descripcion, ID_Credito)  VALUES (NOW(), _Monto, _Saldo_ante, _Saldo_nuevo, _Desc, _ID_Credito);

		-- Actualizar el saldo y efectivo en la factura
		UPDATE Facturas SET Debe = Debe - _Monto, Efectivo = Efectivo + _Monto WHERE ID = _ID_Factura;
		
		-- Comprobar si se ha insertado correctamente el abono
		IF (SELECT ROW_COUNT()) > 0 THEN
			SELECT 'Abono realizado con éxito.';
		ELSE
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Error al realizar el abono.';
		END IF;
	END //
DELIMITER ;

DROP PROCEDURE Actualizar_FacturaCredito;
DELIMITER //
	CREATE PROCEDURE Actualizar_FacturaCredito(
		IN _ID_Credito INT, 
		IN _ID_Factura INT
	)
	BEGIN
		DECLARE Aux_Saldo_nuevo INT;
		
		-- Obtener el saldo nuevo más reciente del crédito
		SELECT Saldo_Nuevo INTO Aux_Saldo_nuevo
		FROM Abono 
		WHERE ID_Credito = _ID_Credito 
		ORDER BY ID DESC 
		LIMIT 1;
		
		IF Aux_Saldo_nuevo = 0 THEN
			-- Si el saldo nuevo es 0, marcar la factura y el crédito como "Cancelado"
			UPDATE Facturas SET Estado = 'Cancelado' WHERE ID = _ID_Factura;
			UPDATE Credito SET Estado = 'Cancelado' WHERE ID = _ID_Credito;
			SELECT 1 AS Resultado;
		ELSE
			SELECT 2 AS Resultado;
		END IF;
	END //
DELIMITER ;

-- ------------------------------------------------------------ Consultas realcionado a los productos --------------------------------------------------------------

DROP VIEW Mostrar_Producto;
CREATE VIEW Mostrar_Producto AS SELECT 
    a.ID, 
    a.Codigo,
    a.Nombre AS 'Producto', 
    a.Estado AS 'Estado', 
    a.Existencias, 
    CONCAT('C$ ', FORMAT(a.Precio_Compra, 2)) AS 'Precio de compra', 
    CONCAT('C$ ', FORMAT(a.Precio_Venta, 2)) AS 'Precio de venta', 
    CONCAT('C$ ', FORMAT(a.Precio_Total, 2)) AS 'Precio total', 
    a.Observacion AS 'Observaciones',
	e.Tipos, 
    CASE WHEN (e.ID) = 1 THEN d.Nombre ELSE e.Tipos END AS 'Tipo de entrada' 
FROM Productos a 
LEFT JOIN Detalle_Compra b ON a.ID = b.ID_Producto 
LEFT JOIN Compras c ON c.ID = b.ID_Compra
LEFT JOIN Proveedor d ON c.ID_Proveedor = d.ID  
INNER JOIN Tipos_Entradas e ON a.ID_Entrada = e.ID 
GROUP BY 
    a.ID, 
    a.Codigo,
    a.Nombre,
    a.Estado,
    a.Existencias, 
    a.Existencias_Minimas,
    CONCAT('C$ ', FORMAT(a.Precio_Compra, 2)),
    CONCAT('C$ ', FORMAT(a.Precio_Venta, 2)),
    CONCAT('C$ ', FORMAT(a.Precio_Total, 2)),
    a.Observacion,
	e.Tipos,
    CASE WHEN (e.ID) = 1 THEN d.Nombre ELSE e.Tipos END
ORDER BY a.ID;

-- ------------------------------------------------------------ Consultas realcionado a las compras --------------------------------------------------------------

DROP VIEW Mostrar_Compras;
CREATE VIEW Mostrar_Compras AS
SELECT
    a.ID,
    a.Estado,
    a.Fecha,
    a.Descripcion AS 'Referencia',
    e.Tipos AS 'Tipo de pago',
    COUNT(b.ID) AS 'Cant. Productos Comprados',
    CONCAT('C$ ', FORMAT(a.Subtotal, 2)) AS 'Subtotal',
    CONCAT(a.Descuento, ' %') AS 'Descuento',
    CONCAT(a.IVA, ' %') AS 'IVA',
    CONCAT('C$ ', FORMAT(a.Total_Final, 2)) AS 'Total',
    d.Nombre 'Usuario',
    a.Nombre_Vendedor AS 'Nombre del vendedor',
    c.Nombre 
FROM Compras a 
INNER JOIN Detalle_Compra b ON a.ID = b.ID_Compra 
INNER JOIN Proveedor c ON a.ID_Proveedor = c.ID 
INNER JOIN Usuarios d ON a.ID_Usuario = d.ID 
INNER JOIN Tipos_Pagos e ON a.ID_TiposPago = e.ID 
WHERE a.Nombre_Vendedor != '--'
GROUP BY a.ID
ORDER BY a.ID; 


DROP PROCEDURE FiltrarCompras;
DELIMITER //
CREATE PROCEDURE FiltrarCompras(
    IN opcion INT,
    IN estadoCompra VARCHAR(100),
    IN idProveedor INT
)
BEGIN
    IF opcion = 1 THEN
        -- Filtrar por Proveedor
        SELECT
            a.ID,
            a.Estado,
            a.Fecha,
            a.Descripcion AS 'Referencia',
            e.Tipos AS 'Tipo de pago',
            COUNT(b.ID) AS 'Cant. Productos Comprados',
            CONCAT('C$ ', FORMAT(a.Subtotal, 2)) AS 'Subtotal',
            CONCAT(a.Descuento, ' %') AS 'Descuento',
            CONCAT(a.IVA, ' %') AS 'IVA',
            CONCAT('C$ ', FORMAT(a.Total_Final, 2)) AS 'Total',
            d.Nombre 'Usuario',
            a.Nombre_Vendedor AS 'Nombre del vendedor',
            c.Nombre
        FROM Compras a
        INNER JOIN Detalle_Compra b ON a.ID = b.ID_Compra
        INNER JOIN Proveedor c ON a.ID_Proveedor = c.ID
        INNER JOIN Usuarios d ON a.ID_Usuario = d.ID
        INNER JOIN Tipos_Pagos e ON a.ID_TiposPago = e.ID
        WHERE c.ID = idProveedor AND a.Nombre_Vendedor != '--'
        GROUP BY a.ID
        ORDER BY a.ID;
        
    ELSEIF opcion = 2 THEN
        -- Filtrar por Estado
        SELECT
            a.ID,
            a.Estado,
            a.Fecha,
            a.Descripcion AS 'Referencia',
            e.Tipos AS 'Tipo de pago',
            COUNT(b.ID) AS 'Cant. Productos Comprados',
            CONCAT('C$ ', FORMAT(a.Subtotal, 2)) AS 'Subtotal',
            CONCAT(a.Descuento, ' %') AS 'Descuento',
            CONCAT(a.IVA, ' %') AS 'IVA',
            CONCAT('C$ ', FORMAT(a.Total_Final, 2)) AS 'Total',
            d.Nombre 'Usuario',
            a.Nombre_Vendedor AS 'Nombre del vendedor',
            c.Nombre
        FROM Compras a
        INNER JOIN Detalle_Compra b ON a.ID = b.ID_Compra
        INNER JOIN Proveedor c ON a.ID_Proveedor = c.ID
        INNER JOIN Usuarios d ON a.ID_Usuario = d.ID
        INNER JOIN Tipos_Pagos e ON a.ID_TiposPago = e.ID
        WHERE a.Estado = estadoCompra AND a.Nombre_Vendedor != '--'
        GROUP BY a.ID
        ORDER BY a.ID;
        
    ELSE
        -- Opción no válida
        SELECT 'Opción no válida' AS Resultado;
    END IF;
END //
DELIMITER ;


-- ------------------------------------------------------------ Consultas realcionada a las remisiones --------------------------------------------------------------

DROP VIEW Mostrar_Remisiones;
CREATE VIEW Mostrar_Remisiones AS
SELECT
    a.ID,
    a.Fecha,
    a.Descripcion AS 'Descripcion',
    COUNT(b.ID) AS 'Cant. Productos',
	a.Tipo_Remision AS 'Tipo de remisión',
	c.Nombre AS 'Nombre del empleado'
FROM Remisiones a 
INNER JOIN Detalle_Remision b ON a.ID = b.ID_Remision
INNER JOIN UsuarioS c ON a.ID_Usuario = c.ID
GROUP BY a.ID
ORDER BY a.ID;


DROP PROCEDURE Filtro_Remisiones;
DELIMITER //
CREATE PROCEDURE Filtro_Remisiones(IN OP INT)
BEGIN
    IF OP = 1 THEN
        -- Consulta de Remisiones de Entrada
        SELECT
            a.ID,
            a.Fecha,
            a.Descripcion AS 'Descripcion',
            COUNT(b.ID) AS 'Cant. Productos',
            a.Tipo_Remision AS 'Tipo de remisión',
            c.Nombre AS 'Nombre del empleado'
        FROM Remisiones a 
        INNER JOIN Detalle_Remision b ON a.ID = b.ID_Remision
        INNER JOIN Usuarios c ON a.ID_Usuario = c.ID
        WHERE a.Tipo_Remision = 'Remisión de Entrada'
        GROUP BY a.ID
        ORDER BY a.ID;
    ELSEIF OP = 2 THEN
        -- Consulta de Remisiones de Salida
        SELECT
            a.ID,
            a.Fecha,
            a.Descripcion AS 'Descripcion',
            COUNT(b.ID) AS 'Cant. Productos',
            a.Tipo_Remision AS 'Tipo de remisión',
            c.Nombre AS 'Nombre del empleado'
        FROM Remisiones a 
        INNER JOIN Detalle_Remision b ON a.ID = b.ID_Remision
        INNER JOIN Usuarios c ON a.ID_Usuario = c.ID
        WHERE a.Tipo_Remision = 'Remisión de Salida'
        GROUP BY a.ID
        ORDER BY a.ID;
    ELSE
        -- Opción no válida
        SELECT 'Opción no válida' AS 'Resultado';
    END IF;
END//
DELIMITER ;

-- --------------------------------------------------------------- Consultas realcionado a la factura -----------------------------------------------------------------

DROP VIEW Mostrar_Factura;
CREATE VIEW Mostrar_Factura AS SELECT
    a.ID AS 'ID',
    CONCAT('FAC-', LPAD(a.Codigo_Fac, 5, '0')) AS 'Codigo',
    a.Estado,
    a.Fecha,
    c.Nombre AS 'Cliente',
    COALESCE(COUNT(b.ID), 0) AS 'Cant. Productos',
    e.Tipos AS 'Tipo de pago',
    CONCAT('C$ ', FORMAT(a.Subtotal, 2)) AS 'Subtotal',
    CONCAT('C$ ', FORMAT(a.Descuento, 2)) AS 'Descuento',
    CONCAT('C$ ', FORMAT(a.Total_Final, 2)) AS 'Total Final',
    CONCAT('C$ ', FORMAT(a.Efectivo, 2)) AS 'Efectivo',
    CONCAT('C$ ', FORMAT(a.Devolucion, 2)) AS 'Devolucion',
    CONCAT('C$ ', FORMAT(a.Debe, 2)) AS 'Debe',
    d.Nombre AS 'Nombre empleado'
FROM Facturas a
INNER JOIN Clientes c ON a.ID_Cliente = c.ID
INNER JOIN Usuarios d ON a.ID_Usuario = d.ID
INNER JOIN Tipos_Pagos e ON a.ID_TiposPago = e.ID
LEFT JOIN Detalle_Factura b ON a.ID = b.ID_Factura
WHERE DATE(a.Fecha) = CURDATE()
GROUP BY a.ID
ORDER BY a.ID;


DROP VIEW Mostrar_TodasFactura;
CREATE VIEW Mostrar_TodasFactura AS  SELECT
    a.ID AS 'ID',
    CONCAT('FAC-', LPAD(a.Codigo_Fac, 5, '0')) AS 'Codigo',
    a.Estado,
    a.Fecha,
    c.Nombre AS 'Cliente',
    COALESCE(COUNT(b.ID), 0) AS 'Cant. Productos',
    e.Tipos AS 'Tipo de pago',
    CONCAT('C$ ', FORMAT(a.Subtotal, 2)) AS 'Subtotal',
    CONCAT('C$ ', FORMAT(a.Descuento, 2)) AS 'Descuento',
    CONCAT('C$ ', FORMAT(a.Total_Final, 2)) AS 'Total Final',
    CONCAT('C$ ', FORMAT(a.Efectivo, 2)) AS 'Efectivo',
    CONCAT('C$ ', FORMAT(a.Devolucion, 2)) AS 'Devolucion',
    CONCAT('C$ ', FORMAT(a.Debe, 2)) AS 'Debe',
    d.Nombre AS 'Nombre empleado'
FROM Facturas a
INNER JOIN Clientes c ON a.ID_Cliente = c.ID
INNER JOIN Usuarios d ON a.ID_Usuario = d.ID
INNER JOIN Tipos_Pagos e ON a.ID_TiposPago = e.ID
LEFT JOIN Detalle_Factura b ON a.ID = b.ID_Factura
GROUP BY a.ID
ORDER BY a.ID;


DROP PROCEDURE SeleccionarProcedimiento;
DELIMITER //
CREATE PROCEDURE SeleccionarProcedimiento(
IN opcion INT,
    IN FechaInicio DATE,
    IN FechaFinal DATE,
    IN _NombreCliente VARCHAR(100)
)
BEGIN
    IF opcion = 1 THEN
        -- Mostrar facturación con campos específicos (Rango entre fechas)
	SELECT
            a.ID AS 'ID',
            CONCAT('FAC-', LPAD(a.Codigo_Fac, 5, '0')) AS 'Codigo',
            a.Estado,
            a.Fecha,
            c.Nombre AS 'Cliente',
	    COALESCE(COUNT(b.ID), 0) AS 'Cant. Productos',
            e.Tipos AS 'Tipo de pago',
            CONCAT('C$ ', FORMAT(a.Subtotal, 2)) AS 'Subtotal',
            CONCAT('C$ ', FORMAT(a.Descuento, 2)) AS 'Descuento',
            CONCAT('C$ ', FORMAT(a.Total_Final, 2)) AS 'Total Final',
            CONCAT('C$ ', FORMAT(a.Efectivo, 2)) AS 'Efectivo',
            CONCAT('C$ ', FORMAT(a.Devolucion, 2)) AS 'Devolucion',
            CONCAT('C$ ', FORMAT(a.Debe, 2)) AS 'Debe',
            d.Nombre AS 'Nombre empleado'
        FROM Facturas a
        INNER JOIN Detalle_Factura b ON a.ID = b.ID_Factura
        INNER JOIN Clientes c ON a.ID_Cliente = c.ID
        INNER JOIN Usuarios d ON a.ID_Usuario = d.ID
        INNER JOIN Tipos_Pagos e ON a.ID_TiposPago = e.ID
        WHERE DATE_FORMAT(a.Fecha, '%Y/%m/%d') BETWEEN FechaInicio AND FechaFinal
        GROUP BY a.ID
        ORDER BY a.ID;
    ELSEIF opcion = 2 THEN
        -- Buscar facturas por nombres de cliente
	SELECT
		a.ID AS 'ID',
		CONCAT('FAC-', LPAD(a.Codigo_Fac, 5, '0')) AS 'Codigo',
		a.Estado,
		a.Fecha,
		c.Nombre AS 'Cliente',
		COALESCE(COUNT(b.ID), 0) AS 'Cant. Productos',
		e.Tipos AS 'Tipo de pago',
		CONCAT('C$ ', FORMAT(a.Subtotal, 2)) AS 'Subtotal',
		CONCAT('C$ ', FORMAT(a.Descuento, 2)) AS 'Descuento',
		CONCAT('C$ ', FORMAT(a.Total_Final, 2)) AS 'Total Final',
		CONCAT('C$ ', FORMAT(a.Efectivo, 2)) AS 'Efectivo',
		CONCAT('C$ ', FORMAT(a.Devolucion, 2)) AS 'Devolucion',
		CONCAT('C$ ', FORMAT(a.Debe, 2)) AS 'Debe',
		d.Nombre AS 'Nombre empleado'
	FROM Facturas a
	INNER JOIN Detalle_Factura b ON a.ID = b.ID_Factura
	INNER JOIN Clientes c ON a.ID_Cliente = c.ID
	INNER JOIN Usuarios d ON a.ID_Usuario = d.ID
	INNER JOIN Tipos_Pagos e ON a.ID_TiposPago = e.ID
	WHERE c.Nombre LIKE CONCAT('%', _NombreCliente, '%')
	GROUP BY a.ID
	ORDER BY a.ID;
    ELSE
        -- Opción no válida
        SELECT 'Opción no válida' AS Resultado;
    END IF;
END //
DELIMITER ;


-- ----------------------------------------------------------- Consultas realcionado a las devoluciones -------------------------------------------------------------

DROP VIEW Mostrar_Devoluciones;
CREATE VIEW Mostrar_Devoluciones AS SELECT
    MAX(a.ID), 
    CONCAT('FAC-', LPAD(d.Codigo_Fac, 5, '0')) AS 'Cod. Factura',
    COUNT(a.ID) AS 'Cant. Devoluciones',
    CONCAT('C$ ', FORMAT(SUM(c.Precio_Venta * b.Cantidad), 2)) AS 'Total Devoluciones',
    MAX(a.Fecha) AS 'Fecha de última Devolución',
    MAX(d.Estado) AS 'Estado',
    MAX(a.Descripcion) AS 'Descripción',
    MAX(e.Nombre) AS 'Cliente',
    MAX(f.Nombre) AS 'Trabajador'
FROM Devoluciones a
INNER JOIN Detalle_Devolucion b ON a.ID = b.ID_Devolucion
INNER JOIN Productos c ON c.ID = b.ID_Producto
INNER JOIN Facturas d ON a.ID_Factura = d.ID
INNER JOIN Clientes e ON d.ID_Cliente = e.ID
INNER JOIN Usuarios f ON d.ID_Usuario = f.ID
GROUP BY d.Codigo_Fac
ORDER BY 'Cod. Factura' ASC;		


DROP PROCEDURE ObtenerDevoluciones;
DELIMITER //
CREATE PROCEDURE ObtenerDevoluciones(
    IN opcion INT,
    IN Fec_Inicio DATETIME,
    IN Fec_Final DATETIME,
    IN _Nombre_Cliente VARCHAR(100),
    IN _Estado VARCHAR(100)
)
BEGIN
    IF opcion = 1 THEN
        -- Mostrar las devoluciones (Rango entre fechas)
         SELECT
    		MAX(a.ID), 
    		CONCAT('FAC-', LPAD(d.Codigo_Fac, 5, '0')) AS 'Cod. Factura',
	    	COUNT(a.ID) AS 'Cant. Devoluciones',
   		CONCAT('C$ ', FORMAT(SUM(c.Precio_Venta * b.Cantidad), 2)) AS 'Total Devoluciones',
  		MAX(a.Fecha) AS 'Fecha de última Devolución',
		MAX(d.Estado) AS 'Estado',
	 	MAX(a.Descripcion) AS 'Descripción',
    		MAX(e.Nombre) AS 'Cliente',
	    	MAX(f.Nombre) AS 'Trabajador'
	FROM Devoluciones a
	INNER JOIN Detalle_Devolucion b ON a.ID = b.ID_Devolucion
	INNER JOIN Productos c ON c.ID = b.ID_Producto
	INNER JOIN Facturas d ON a.ID_Factura = d.ID
	INNER JOIN Clientes e ON d.ID_Cliente = e.ID
	INNER JOIN Usuarios f ON d.ID_Usuario = f.ID
        WHERE DATE_FORMAT(a.Fecha, '%Y/%m/%d') BETWEEN Fec_Inicio AND Fec_Final
        GROUP BY d.Codigo_Fac
	ORDER BY 'Cod. Factura' ASC;
    ELSEIF opcion = 2 THEN
        -- Buscar devolución por nombres de cliente
        SELECT
    		MAX(a.ID), 
    		CONCAT('FAC-', LPAD(d.Codigo_Fac, 5, '0')) AS 'Cod. Factura',
	    	COUNT(a.ID) AS 'Cant. Devoluciones',
   		CONCAT('C$ ', FORMAT(SUM(c.Precio_Venta * b.Cantidad), 2)) AS 'Total Devoluciones',
  		MAX(a.Fecha) AS 'Fecha de última Devolución',
		MAX(d.Estado) AS 'Estado',
	 	MAX(a.Descripcion) AS 'Descripción',
    		MAX(e.Nombre) AS 'Cliente',
	    	MAX(f.Nombre) AS 'Trabajador'
	FROM Devoluciones a
	INNER JOIN Detalle_Devolucion b ON a.ID = b.ID_Devolucion
	INNER JOIN Productos c ON c.ID = b.ID_Producto
	INNER JOIN Facturas d ON a.ID_Factura = d.ID
	INNER JOIN Clientes e ON d.ID_Cliente = e.ID
	INNER JOIN Usuarios f ON d.ID_Usuario = f.ID
        WHERE e.Nombre LIKE CONCAT('%', _Nombre_Cliente, '%')
        GROUP BY d.Codigo_Fac
	ORDER BY 'Cod. Factura' ASC;
    ELSEIF opcion = 3 THEN
        -- Buscar devolución por estado de factura
         SELECT
    		MAX(a.ID), 
    		CONCAT('FAC-', LPAD(d.Codigo_Fac, 5, '0')) AS 'Cod. Factura',
	    	COUNT(a.ID) AS 'Cant. Devoluciones',
   		CONCAT('C$ ', FORMAT(SUM(c.Precio_Venta * b.Cantidad), 2)) AS 'Total Devoluciones',
  		MAX(a.Fecha) AS 'Fecha de última Devolución',
		MAX(d.Estado) AS 'Estado',
	 	MAX(a.Descripcion) AS 'Descripción',
    		MAX(e.Nombre) AS 'Cliente',
	    	MAX(f.Nombre) AS 'Trabajador'
	FROM Devoluciones a
	INNER JOIN Detalle_Devolucion b ON a.ID = b.ID_Devolucion
	INNER JOIN Productos c ON c.ID = b.ID_Producto
	INNER JOIN Facturas d ON a.ID_Factura = d.ID
	INNER JOIN Clientes e ON d.ID_Cliente = e.ID
	INNER JOIN Usuarios f ON d.ID_Usuario = f.ID
        WHERE d.Estado = _Estado
        GROUP BY d.Codigo_Fac
	ORDER BY 'Cod. Factura' ASC;
    ELSE
        -- Opción no válida
        SELECT 'Opción no válida' AS Resultado;
    END IF;
END //
DELIMITER ;
