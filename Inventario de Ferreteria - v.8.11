DROP DATABASE IF EXISTS db_inasoftware;
CREATE DATABASE db_inasoftware;

-- CREATE USER 'kevin'@'localhost' IDENTIFIED WITH mysql_native_password BY '123qwe';
USE db_inasoftware;

GRANT ALL PRIVILEGES ON db_inasoftware TO 'Kevin'@'localhost' WITH GRANT OPTION;

FLUSH PRIVILEGES;

-- TABLA Tipos de Usuarios
CREATE TABLE `Tipo_Usuarios` (
	`ID` INT NOT NULL AUTO_INCREMENT,
	`Nombre` VARCHAR(45) DEFAULT NULL,
	CONSTRAINT Tipos_Usuariospk PRIMARY KEY(id)
);

-- TABLA Usuarios
CREATE TABLE `Usuarios` (
  	`ID` INT NOT NULL AUTO_INCREMENT,
  	`Nombre` VARCHAR(70) NOT NULL,
  	`Usuario` VARCHAR(50) NOT NULL,
  	`Password` VARCHAR(80) DEFAULT NULL,
  	`ID_Tipo` INT NOT NULL,
	CONSTRAINT Usuariospk PRIMARY KEY(id),
	CONSTRAINT Usuariosfk FOREIGN KEY(ID_Tipo) REFERENCES Tipo_Usuarios(ID) ON UPDATE CASCADE ON DELETE CASCADE 
);

-- TABLA Clientes
CREATE TABLE `Clientes` (
  	`ID` INT NOT NULL AUTO_INCREMENT,
  	`Nombre` VARCHAR(70) NOT NULL,
	`Telefono` VARCHAR(10) DEFAULT NULL,
  	`Direccion` VARCHAR(100) DEFAULT NULL,
  	`Cedula` VARCHAR(20) DEFAULT NULL,
	CONSTRAINT Clientespk PRIMARY KEY(ID)
);

-- TABLA Proveedores
CREATE TABLE `Proveedor` (
  	`ID` INT NOT NULL AUTO_INCREMENT,
  	`Nombre` VARCHAR(70) NOT NULL,
	`Telefono` VARCHAR(10) DEFAULT NULL,
	`Direccion` VARCHAR(100) DEFAULT NULL,
	`RUC` VARCHAR(20) DEFAULT NULL, 
	CONSTRAINT Proveedorpk PRIMARY KEY(ID)
);

-- TABLA Compras de porductos
CREATE TABLE `Compras`(
	`ID` INT NOT NULL AUTO_INCREMENT,
	`Fecha` DATETIME NOT NULL,
	`Nombre_Vendedor` VARCHAR(200) NOT NULL,
	`Descripcion` VARCHAR(200) NOT NULL,
	`Subtotal` DOUBLE DEFAULT NULL,
	`Descuento` DOUBLE NOT NULL,
	`IVA` DOUBLE NOT NULL,
	`Total_Final` DOUBLE DEFAULT NULL,
	`Tipo_Pago` VARCHAR(50) DEFAULT NULL,
	`ID_Usuario` INT NOT NULL,
	`ID_Proveedor` INT NOT NULL,
	CONSTRAINT Compraspk PRIMARY KEY(ID),
	CONSTRAINT Comprasfk1 FOREIGN KEY(ID_usuario) REFERENCES Usuarios(ID) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT Comprasfk2 FOREIGN KEY(ID_Proveedor) REFERENCES Proveedor(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE `Detalle_Compra`(
	`ID` INT NOT NULL AUTO_INCREMENT,
	`Codigo_Prod` VARCHAR(45) NOT NULL,
  	`Nombre_Prod` VARCHAR(100) NOT NULL,
	`Cantidad` INT NOT NULL,
	`Precio_Compra` DOUBLE NOT NULL,
	`Total` DOUBLE NOT NULL,
	`ID_Compra` INT NOT NULL,
	CONSTRAINT Detalle_Comprapk PRIMARY KEY(ID),
	CONSTRAINT Detalle_Comprafk FOREIGN KEY(ID_Compra) REFERENCES Compras(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- TABLA Productos
CREATE TABLE `Productos` (
  	`ID` INT NOT NULL AUTO_INCREMENT,
  	`Codigo` VARCHAR(45) UNIQUE NOT NULL,
  	`Nombre` VARCHAR(100) NOT NULL,
	`Estado` ENUM('Activo', 'No activo') DEFAULT 'Activo',
  	`Existencias` INT NOT NULL,
	`Precio_Compra` DOUBLE NOT NULL,
	`Precio_Venta` DOUBLE NOT NULL,
  	`Precio_Total` DOUBLE NOT NULL,
  	`Observacion` VARCHAR(200) DEFAULT NULL,
	`ID_DetalleCompra` INT NOT NULL,
  	CONSTRAINT Productospk PRIMARY KEY(ID),
	CONSTRAINT Productosfk2 FOREIGN KEY(ID_DetalleCompra) REFERENCES Detalle_Compra(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- TABLA Facturas
CREATE TABLE `Facturas`(
	`ID` INT NOT NULL AUTO_INCREMENT,
	`Codigo_Fac` INT,
	`Estado` VARCHAR(50) DEFAULT NULL,
	`Fecha` DATETIME NOT NULL,
	`Descuento` DOUBLE DEFAULT NULL,
	`Subtotal` DOUBLE DEFAULT NULL,
	`Total_Final` DOUBLE DEFAULT NULL,
	`Efectivo` DOUBLE DEFAULT NULL,
	`Devolucion` DOUBLE DEFAULT NULL,
	`Debe` DOUBLE DEFAULT NULL,
	`Tipo_Pago` VARCHAR(50) DEFAULT NULL,
	`Tipo_Factura` VARCHAR(50) DEFAULT NULL,
	`ID_Usuario` INT NOT NULL,
	`ID_Cliente` INT NOT NULL,
	CONSTRAINT Facturaspk PRIMARY KEY(ID),
	CONSTRAINT Facturasfk1 FOREIGN KEY(ID_usuario) REFERENCES Usuarios(ID) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT Facturasfk2 FOREIGN KEY(ID_cliente) REFERENCES Clientes(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE `Facturas_Anuladas`(
	`ID` INT NOT NULL AUTO_INCREMENT,
	`Descripcion` VARCHAR(400) DEFAULT NULL,
	`ID_Factura` INT NOT NULL,
	CONSTRAINT Facturas_Anuladaspk PRIMARY KEY(ID),
	CONSTRAINT Facturas_Anuladasfk1 FOREIGN KEY(ID_Factura) REFERENCES Facturas(ID) ON UPDATE CASCADE ON DELETE CASCADE		
);

-- TABLA Detalle de la facturas
CREATE TABLE `Detalle_Factura`(
	`ID` INT NOT NULL AUTO_INCREMENT,
	`Cantidad` INT NOT NULL,
	`Precio` DOUBLE NOT NULL,
	`Total` DOUBLE NOT NULL,
	`Codigo_Prod` VARCHAR(45) NOT NULL,
  	`Nombre_Prod` VARCHAR(100) NOT NULL,
	`ID_Factura` INT NOT NULL,
	CONSTRAINT Detalle_Facturapk PRIMARY KEY(ID),
	CONSTRAINT Detalle_Facturafk FOREIGN KEY(ID_Factura) REFERENCES Facturas(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- TABLA Devoluciones
CREATE TABLE `Devoluciones`(
	`ID` INT NOT NULL AUTO_INCREMENT,
	`Fecha` DATETIME NOT NULL,
	`Descripcion` VARCHAR(200),
	`ID_Factura` INT NOT NULL,
	CONSTRAINT Devolucionespk PRIMARY KEY(ID),
	CONSTRAINT Devolucionesfk FOREIGN KEY(ID_Factura) REFERENCES Facturas(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- TABLA Detalles de la devolución
CREATE TABLE `Detalle_Devolucion`(
	`ID` INT NOT NULL AUTO_INCREMENT,
	`Cantidad` INT NOT NULL,
	`Precio` DOUBLE NOT NULL,
	`Total` DOUBLE NOT NULL,
	`Codigo_Prod` VARCHAR(45) NOT NULL,
  	`Nombre_Prod` VARCHAR(100) NOT NULL,
	`ID_Devolucion` INT NOT NULL,
	CONSTRAINT Detalle_Devolucionpk PRIMARY KEY(ID),
	CONSTRAINT Detalle_Devolucionfk FOREIGN KEY(ID_Devolucion) REFERENCES Devoluciones(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- TABLA Crédito
CREATE TABLE `Credito` (
	`ID` INT NOT NULL AUTO_INCREMENT,
	`DiaDeCredito` DATE NOT NULL,
	`DiaDeVencimiento` DATE NOT NULL,
	`Cargo` DOUBLE DEFAULT NULL,
	`Estado` VARCHAR(10) DEFAULT NULL,
	`Descripcion` VARCHAR(400) DEFAULT NULL,
	`ID_Factura` INT NOT NULL,
	`ID_Cliente` INT NOT NULL,
	CONSTRAINT Creditopk PRIMARY KEY(ID),
	CONSTRAINT Creditofk1 FOREIGN KEY(ID_Factura) REFERENCES Facturas(ID) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT Creditofk2 FOREIGN KEY(ID_Cliente) REFERENCES Clientes(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- TABLA Abono
CREATE TABLE `Abono` (
	`ID` INT NOT NULL AUTO_INCREMENT,
	`Fecha` DATETIME NOT NULL,
	`Monto` DOUBLE NOT NULL,
	`Saldo_Anterior` DOUBLE DEFAULT NULL,
	`Saldo_Nuevo` DOUBLE DEFAULT NULL,
	`Descripcion` VARCHAR(400) DEFAULT NULL,
	`ID_Credito` INT NOT NULL,
	CONSTRAINT Abonopk PRIMARY KEY(ID),
	CONSTRAINT Abonofk FOREIGN KEY(ID_Credito) REFERENCES Credito(ID) ON UPDATE CASCADE ON DELETE CASCADE
);

-- TABLA Información general
CREATE TABLE `InfoGeneral` (
	`IDinfogeneral` INT NOT NULL AUTO_INCREMENT,
	`Nombre_negocio` VARCHAR(100) DEFAULT NULL,
	`Direccion_negocio` VARCHAR(100) DEFAULT NULL,
	`Num_ruc` VARCHAR(45) DEFAULT NULL,
	`Nombre_admin` VARCHAR(45) DEFAULT NULL,
	`Telefono` VARCHAR(10) DEFAULT NULL,
	PRIMARY KEY (`IDinfogeneral`)
);

-- TABLA Logs
CREATE TABLE `Logs` (
	`IDlogs` INT NOT NULL AUTO_INCREMENT,
	`Descripcion` VARCHAR(200) DEFAULT NULL,
	PRIMARY KEY (`IDlogs`)
);


-- ---------------------------------------------------------------- Insertar datos iniciales ----------------------------------------------------------------

-- Insertar Información General de la Ferretería
INSERT INTO InfoGeneral VALUES (1,'Ferreteria Luz','Iglesia Sn. Agustin, 80 vrs al S.','12515748412','Meyling Zuniga','8810-9566');

-- Insertar Tipos de usuarios
INSERT INTO Tipo_Usuarios VALUES(NULL, 'Administrador');
INSERT INTO Tipo_Usuarios VALUES(NULL, 'Empleado');

-- Insertar Usuarios
INSERT INTO Usuarios VALUES (NULL,'Kevin Munguia','admin','05fe7461c607c33229772d402505601016a7d0ea',1);

-- Insertar Cliente generico 
INSERT INTO Clientes VALUES (NULL, 'Cliente génerico', NULL, NULL, NULL);

-- Insertar Proveedores 
INSERT INTO Proveedor VALUES (NULL, 'Devolución', '--', '--', 000);
INSERT INTO Proveedor VALUES (NULL, 'HALCOM', '23154365', 'Chinandega', 001);
INSERT INTO Proveedor VALUES (NULL, 'PINTURAS LANCO', '23154365', 'Managua', 002);
INSERT INTO Proveedor VALUES (NULL, 'SINSA', '23154365', 'Managua', 003);
INSERT INTO Proveedor VALUES (NULL, 'CEMENTERA JAVIER', '23154365', 'Managua', 004);


-- ---------------------------------------------------------------- Procedimientos de Productos ----------------------------------------------------------------

-- Insertar Producto
DELIMITER //
	CREATE PROCEDURE Insertar_Producto(_Codigo VARCHAR(45), _Nombre VARCHAR(100), _Existencias INT, _Precio_Compra DOUBLE, _Precio_Venta DOUBLE, _Observacion VARCHAR(200), _ID_DetalleCompra INT)
	BEGIN
		DECLARE Total FLOAT;
		SET Total = _Precio_Compra * _Existencias;
		INSERT INTO Productos (Codigo, Nombre, Estado, Existencias, Precio_Compra, Precio_Venta, Precio_Total, Observacion, ID_DetalleCompra) VALUES(_Codigo, _Nombre, 'Activo', _Existencias, _Precio_Compra, _Precio_Venta, Total, _Observacion, _ID_DetalleCompra);
	END//
DELIMITER ;


-- Actualizar Producto
DELIMITER //
	CREATE PROCEDURE Actualizar_Producto(_ID_Producto INT, _Estado VARCHAR(50), _Existencias INT, _Precio_Compra DOUBLE, _Precio_Venta DOUBLE, _Observacion VARCHAR(200))
	BEGIN
		DECLARE Total FLOAT;

    		-- Actualiza los detalles del producto
    		UPDATE Productos SET Estado = _Estado, Precio_Compra = _Precio_Compra, Precio_Venta = _Precio_Venta, Precio_Total = (Existencias * _Precio_Compra), Observacion = _Observacion WHERE ID = _ID_Producto;
    		-- Calcula el nuevo valor para Precio_Total
		SET Total = (_Precio_Compra * _Existencias);

    		-- Actualiza el Precio_Total y Existencias
    		UPDATE Productos SET Precio_Total = Precio_Total + Total, Existencias = Existencias + _Existencias WHERE ID = _ID_Producto;
	END//
DELIMITER ;


-- ------------------------------------------------------------ Procedimientos de compras de productos------------------------------------------------------------

-- Realizar nueva compra
DELIMITER //
	CREATE PROCEDURE Realizar_Compra(_Nombre_Vendedor VARCHAR(200), _Subtotal DOUBLE, _Descuento DOUBLE, _IVA DOUBLE, _Descripcion VARCHAR(200), _Tipo_Pago VARCHAR(50), _ID_Usuario INT, _ID_Proveedor INT)
	BEGIN
		DECLARE Aux INT;
		DECLARE AuxCompraID INT;
		DECLARE Subtotal DOUBLE;
		DECLARE Aux_Subtotal DOUBLE;
		DECLARE Total DOUBLE;

		-- Verificar si hay IVA
		IF (_IVA > 0) THEN
			SET Subtotal = _Subtotal + (_Subtotal * (_IVA/ 100));
		ELSE 
			SET Subtotal = _Subtotal;
		END IF;
		
		-- Verificar si se realizo un Descuento
		IF (_Descuento > 0) THEN
			SET Aux_Subtotal =  Subtotal - (Subtotal * (_Descuento/ 100));
		ELSE
			SET Aux_Subtotal = Subtotal;
		END IF;

		SET Total = Aux_Subtotal;
		
		INSERT INTO Compras(Fecha, Nombre_Vendedor, Descripcion, Subtotal, Descuento, IVA, Total_Final, Tipo_Pago, ID_Usuario, ID_Proveedor) VALUES((NOW()), _Nombre_Vendedor, _Descripcion, _Subtotal, _Descuento, _IVA, Total, _Tipo_Pago, _ID_Usuario, _ID_Proveedor);
	END//
DELIMITER ;

CALL Realizar_Compra('Jorge', 300.00, 10, 16, 'Compra de dos productos', 'Transferencia', 1, 3);

-- Comprar detalle compra e insertar productos
DELIMITER //
	CREATE PROCEDURE Productos_Comprados(_ID_Producto INT, _Codigo_Producto VARCHAR(45), _Nombre_Producto VARCHAR(100), _Cantidad INT, _Precio_Compra DOUBLE, _Total DOUBLE, _Precio_Venta DOUBLE , _Observacion VARCHAR(200))
	BEGIN
		DECLARE Aux INT;
		DECLARE AuxCompraID INT;

		SET AuxCompraID = CONVERT((SELECT ID FROM Compras ORDER BY ID DESC LIMIT 1), UNSIGNED INT);
		INSERT INTO Detalle_Compra(Codigo_Prod, Nombre_Prod, Cantidad, Precio_Compra, Total, ID_Compra) VALUE (_Codigo_Producto, _Nombre_Producto, _Cantidad, _Precio_Compra, _Total, AuxCompraID);

    		-- Verificar si el dato ya existe en la tabla
    		SET Aux = (SELECT ID FROM Productos WHERE ID = _ID_Producto);

    		-- Comprobar el resultado
    		IF Aux IS NOT NULL THEN
				CALL Actualizar_Producto(_ID_Producto, 'Activo', _Cantidad, _Precio_Compra, _Precio_Venta, _Observacion);
    		ELSE
				CALL Insertar_Producto(_Codigo_Producto, _Nombre_Producto, _Cantidad, _Precio_Compra, _Precio_Venta, _Observacion, AuxCompraID);
    		END IF;
	END//
DELIMITER ;

CALL Productos_Comprados(0, '00001', 'TINSETICO MURO SECO BLANCO', 190, 240.00, 55100.00, 290.00, '--');
CALL Productos_Comprados(0, '00002', 'CANAL AMARRE 1 5/8 x 10', 100, 68.00, 8000.00, 80.00, '--');
CALL Productos_Comprados(0, '00003', 'CANAL AMARRE 2 1/2 x 10', 100, 68.00, 8000.00, 80.00, '--');
CALL Productos_Comprados(0, '00004', 'CANAL AMARRE 3 5/8 x 10', 100, 68.00, 9000.00, 90.00, '--');
CALL Productos_Comprados(0, '00005', 'LAMINA GYPSUM REG', 200, 315.00, 76000.00, 380.00, '--');
CALL Productos_Comprados(0, '00006', 'ESQUINERO  VINILICO 1 1/4 X 10', 100, 425.00, 7500.00, 475.0, '--');
CALL Productos_Comprados(0, '00007', 'CEMENTO HOLCIM', 190, 240.00, 55100.00, 290, '--');
CALL Productos_Comprados(0, '00008', 'ANTICORROSIVO ROJO GALON', 5, 550.00, 3750.00, 750.00, '--');


-- ---------------------------------------------------------------- Procedimientos de facturación ----------------------------------------------------------------

-- Trigger para controlar la secuencia del codigo factura
DELIMITER //
	CREATE TRIGGER tr_actualizar_Cod BEFORE INSERT ON Facturas
	FOR EACH ROW
	BEGIN
  		DECLARE max_secuencia INT;
  		SET max_secuencia = (SELECT MAX(Codigo_Fac) FROM Facturas);

		IF max_secuencia IS NULL THEN
			SET NEW.Codigo_Fac = 1;
  		ELSE
    			SET NEW.Codigo_Fac = max_secuencia + 1;
  		END IF;
	END//
DELIMITER ;


-- Facturación de los prodcutos con el ID de la factura
DELIMITER //
	CREATE PROCEDURE Facturar_Productos(_Cantidad INT, _Precio DOUBLE, _Codigo_Prod VARCHAR(45), _Nombre_Prod VARCHAR(100), _ID_Factura INT)
	BEGIN
		DECLARE Total DOUBLE;

		SET Total = _Cantidad * _Precio;

		INSERT INTO Detalle_Factura VALUES(NULL, _Cantidad, _Precio, Total, _Codigo_Prod, _Nombre_Prod, _ID_Factura);
		UPDATE Productos SET Existencias=(Existencias - _Cantidad) WHERE Codigo = _Codigo_Prod;
		UPDATE Productos SET Precio_Total = (Precio_Venta * Existencias) WHERE Codigo = _Codigo_Prod;	
	END//
DELIMITER ;


-- Eliminar un producto que no desee facturar y devolver la cantidad del producto
DELIMITER //
	CREATE PROCEDURE Eliminar_Producto_Facturado(ID_Detalle_Factura INT, ID_Producto INT, _Cantidad INT)
	BEGIN
		UPDATE Productos SET Existencias=(Existencias + _Cantidad) WHERE ID = ID_Producto;
		DELETE FROM Detalle_Factura WHERE ID = ID_Detalle_Factura;
	END//
DELIMITER ;


-- Mostrar el código de la última factura realizada
DELIMITER //
	CREATE PROCEDURE Mostrar_Cod()
	BEGIN
		DECLARE Aux_Cod INT;
		SET Aux_Cod = CONVERT((SELECT Codigo_Fac FROM Facturas ORDER BY Codigo_Fac DESC LIMIT 1), UNSIGNED INT);
		IF (SELECT Aux_Cod) IS NULL THEN 
			SELECT CONCAT('FAC-', LPAD(1, 2, '0'));
		ELSE
			SELECT CONCAT('FAC-', LPAD((Aux_Cod + 1), 2, '0'));
		END IF;
	END//
DELIMITER ;


-- Mostrar el último ID de una factura realizada
DELIMITER //
	CREATE PROCEDURE Mostrar_ID()
	BEGIN
		DECLARE Aux_ID INT;
		SET Aux_ID = CONVERT((SELECT ID FROM Facturas ORDER BY ID DESC LIMIT 1), UNSIGNED INT);
		IF (SELECT Aux_ID ) IS NULL THEN 
			SELECT 0;
		ELSE
			SELECT Aux_ID;
		END IF;
	END//
DELIMITER ;

-- Facturación al contado Final 
DELIMITER //
	CREATE PROCEDURE Facturacion_Final(_Estado VARCHAR(50), _Descuento DOUBLE, _Subtotal DOUBLE, _Efectivo DOUBLE, _Debe DOUBLE, _TipoPago VARCHAR(50), _TipoFactura VARCHAR(50), _ID_Usuario INT, _ID_Cliente INT)
	BEGIN
		DECLARE Total DOUBLE;
		DECLARE Vuelto DOUBLE;

		IF (_Estado = 'Pendiente') THEN
			IF (_Descuento = 0.00) THEN
				SET Total = _Subtotal;
			ELSE 
				SET Total = _Subtotal - _Descuento;
			END IF;
			SET Vuelto = 0.00;
		ELSE 
			IF (_Descuento = 0.00) THEN
				SET Total = _Subtotal;
			ELSE 
				SET Total = _Subtotal - _Descuento;
			END IF;
			SET Vuelto = _Efectivo - Total;
		END IF;
		
		INSERT INTO Facturas (Estado, Fecha, Descuento, Subtotal, Total_Final, Efectivo, Devolucion, Debe, Tipo_Pago, Tipo_Factura, ID_Usuario, ID_Cliente) VALUES(_Estado, (NOW()), _Descuento, _Subtotal, Total, _Efectivo, Vuelto, _Debe, _TipoPago, _TipoFactura, _ID_Usuario, _ID_Cliente);
	END//
DELIMITER ;

-- Eliminar factura y detalle facturas 
DELIMITER //
	CREATE PROCEDURE Eliminar_Factura(_ID_Factura INT)
	BEGIN
		DELETE FROM Facturas WHERE ID = _ID_Factura;
		DELETE FROM Detalle_Factura WHERE ID_Factura = _ID_Factura;
	END//
DELIMITER ;


-- Anular una factura
DELIMITER //
	CREATE PROCEDURE Anular_Factura(_Precio DOUBLE, _Cantidad INT, _Codigo_Prod VARCHAR(45), _ID_Factura INT)
	BEGIN
		DECLARE Total_Prod DOUBLE;

        		SET Total_Prod = _Precio * _Cantidad;

			UPDATE Productos SET Existencias=(Existencias + _Cantidad) WHERE Codigo = _Codigo_Prod;
			UPDATE Productos SET Precio_Total = (Precio_Total + Total_Prod) WHERE Codigo = _Codigo_Prod;

			UPDATE Detalle_Factura SET Cantidad = (Cantidad - _Cantidad) WHERE Codigo_Prod = _Codigo_Prod && ID_Factura = _ID_Factura; 
			UPDATE Detalle_Factura SET Total = (Total - Total_Prod) WHERE Codigo_Prod = _Codigo_Prod && ID_Factura = _ID_Factura;
	END//
DELIMITER ;

DELIMITER //
	CREATE PROCEDURE Actualizar_FacturaAnulada(_Desc VARCHAR(200), _ID_Factura INT)
	BEGIN
		UPDATE Facturas SET 
			Estado = 'Anulada', 
			Descuento = 0.00, 
			Subtotal = 0.00, 
			Total_Final = 0.00,
			Efectivo = 0.00,
			Debe = 0.00,
			Devolucion = 0.00,
			Tipo_Pago = '--',
			Tipo_Factura = '--' WHERE ID = _ID_Factura;

			INSERT INTO Facturas_Anuladas VALUES(NULL, _Desc, _ID_Factura);

			IF (SELECT ID FROM Credito WHERE ID_Factura = _ID_Factura) IS NOT NULL THEN
				DELETE FROM Credito WHERE ID_Factura = _ID_Factura;
			END IF;

			IF (SELECT ID FROM Devoluciones WHERE ID_Factura = _ID_Factura) IS NOT NULL THEN
				DELETE FROM Devoluciones WHERE ID_Factura = _ID_Factura;
			END IF;
	END//
DELIMITER ;


-- ---------------------------------------------------------------- Procedimientos de devoluciones ----------------------------------------------------------------

-- Agregar una devolución
DELIMITER //
	CREATE PROCEDURE Agregar_Devolucion(_Fecha DATETIME, _Desc VARCHAR(200), _ID_Factura INT)
	BEGIN
		INSERT INTO Devoluciones VALUES(NULL, _Fecha, _Desc, _ID_Factura);
	END//
DELIMITER ;


-- Devolución de los prodcutos con el ID de la factura 
DELIMITER //
	CREATE PROCEDURE Devolver_Productos(_Cantidad INT, _Precio DOUBLE, _Codigo_Prod VARCHAR(45), _Nombre_Prod VARCHAR(100), _ID_Devolucion INT, _ID_Factura INT)
	BEGIN
		DECLARE Total_Prod DOUBLE;

    		IF (SELECT Codigo FROM Productos WHERE Codigo = _Codigo_Prod) IS NOT NULL THEN
        		SET Total_Prod = _Precio * _Cantidad;

			INSERT INTO Detalle_Devolucion VALUES(NULL, _Cantidad, _Precio, Total_Prod, _Codigo_Prod, _Nombre_Prod, _ID_Devolucion);
			UPDATE Productos SET Existencias=(Existencias + _Cantidad) WHERE Codigo = _Codigo_Prod;
			UPDATE Productos SET Precio_Total = (Precio_Total + Total_Prod) WHERE Codigo = _Codigo_Prod;
			
			UPDATE Detalle_Factura SET Cantidad = (Cantidad - _Cantidad) WHERE Codigo_Prod = _Codigo_Prod && ID_Factura = _ID_Factura;
			UPDATE Detalle_Factura SET Total = (Total - Total_Prod) WHERE Codigo_Prod = _Codigo_Prod && ID_Factura = _ID_Factura;
    		ELSE
			SET Total_Prod = _Precio * _Cantidad;
			INSERT INTO Detalle_Devolucion VALUES(NULL, _Cantidad, _Precio, Total_Prod, _Codigo_Prod, _Nombre_Prod, _ID_Devolucion);
        		INSERT INTO Productos (Codigo, Nombre, Existencias, Precio_Compra, Precio_Venta, Precio_Total, Observacion, ID_Proveedor) VALUES(_Codigo_Prod, _Nombre_Prod, _Cantidad, _Precio, _Precio, Total_Prod, '--', 1);

			UPDATE Detalle_Factura SET Cantidad = (Cantidad - _Cantidad) WHERE Codigo_Prod = _Codigo_Prod && ID_Factura = _ID_Factura;
			UPDATE Detalle_Factura SET Total = (Total - Total_Prod) WHERE Codigo_Prod = _Codigo_Prod && ID_Factura = _ID_Factura;
		END IF;
	END//
DELIMITER ;


-- Actualizar los campos de la factura final
DELIMITER //
	CREATE PROCEDURE Actualizar_facturacion(_Devolucion DOUBLE, _ID_Factura INT)
	BEGIN
		DECLARE Aux_Cantidad INT;

		UPDATE Facturas SET Subtotal = Subtotal - _Devolucion WHERE ID = _ID_Factura;
		UPDATE Facturas SET Total_Final = Total_Final - _Devolucion WHERE ID = _ID_Factura;
		UPDATE Facturas SET Efectivo = Efectivo - _Devolucion WHERE ID = _ID_Factura;
		UPDATE Facturas SET Devolucion = (Efectivo - Total_Final)  WHERE ID = _ID_Factura;
	END//
DELIMITER ;


-- Verificar si se realizó una devolución en una factura 
DELIMITER //
	CREATE PROCEDURE Verificar_Devolucion(_ID_Factura INT)
	BEGIN
		DECLARE Aux INT;
		SET Aux = CONVERT((SELECT ID_Factura FROM Devoluciones WHERE ID_Factura = _ID_Factura), UNSIGNED INT);

    		IF (SELECT Aux) IS NOT NULL THEN
			SELECT 1;
		ELSE
			SELECT 0;
		END IF;
	END//
DELIMITER ;


-- ---------------------------------------------------------------- Procedimientos de Créditos y abonos ---------------------------------------------------------------

-- Agregar crédito
DELIMITER //
	CREATE PROCEDURE Agregar_Credito(_TipoPago VARCHAR(50), _DiaDeCredito DATE, _DiaDeVencimiento DATE, _Cargo DOUBLE, _Estado VARCHAR(50), _Desc VARCHAR(400), _ID_Factura INT, _ID_Cliente INT)
	BEGIN
		UPDATE Facturas SET Tipo_Pago = _TipoPago WHERE ID = _ID_Factura;
		INSERT INTO Credito VALUES(NULL, _DiaDeCredito, _DiaDeVencimiento, _Cargo, _Estado, _Desc, _ID_Factura, _ID_Cliente);
	END//
DELIMITER ;


-- Realizar Abono
DELIMITER //
	CREATE PROCEDURE Realziar_Abono(_Fecha DATETIME, _Monto DOUBLE, _Saldo_ante DOUBLE, _Saldo_nuev DOUBLE, _Desc VARCHAR(100), _ID_Credito INT, _ID_Factura INT)
	BEGIN
		INSERT INTO Abono VALUES(NULL, _Fecha, _Monto, _Saldo_ante, _Saldo_nuev, _Desc, _ID_Credito);

		UPDATE Facturas SET Debe = (Debe - _Monto)  WHERE ID = _ID_Factura;
		UPDATE Facturas SET Efectivo = (Efectivo + _Monto)  WHERE ID = _ID_Factura;
	END//
DELIMITER ;


-- Cuando el saldo sea 0.00 actualizar a "Cancelado" la factura al crédito
DELIMITER //
	CREATE PROCEDURE Actualizar_FacturaCredito(IN _ID_Credito INT, _ID_Factura INT)
	BEGIN
		DECLARE Aux_Saldo_nuevo INT;
		SET Aux_Saldo_nuevo = CONVERT((SELECT Saldo_Nuevo FROM Abono WHERE ID_Credito = _ID_Credito ORDER BY ID DESC LIMIT 1), UNSIGNED INT);
	IF (SELECT Aux_Saldo_nuevo) = 0 THEN
		SELECT 1;
		UPDATE Facturas SET Estado = "Cancelado" WHERE ID = _ID_Factura;
		UPDATE Credito SET Estado = "Cancelado" WHERE ID = _ID_Credito;
	ELSE
		SELECT 2;
	END IF;
END //
DELIMITER ;
 
-- ------------------------------------------------------------ Consultas realcionado a los productos --------------------------------------------------------------

-- Mostrar todos los productos
CREATE VIEW Mostrar_Producto AS SELECT a.ID, a.Codigo AS 'Codigo', a.Nombre AS 'Producto', a.Estado AS 'Estado', a.Existencias, CONCAT('C$ ', FORMAT(a.Precio_Compra, 2)) AS 'Precio de compra', CONCAT('C$ ', FORMAT(a.Precio_Venta, 2)) AS 'Precio de venta', CONCAT('C$ ', FORMAT(a.Precio_Total, 2)) AS 'Precio total', a.Observacion AS 'Observaciones', d.Nombre AS 'Proveedores', c.ID_Proveedor FROM Productos a INNER JOIN detalle_compra b ON b.ID = a.ID_DetalleCompra INNER JOIN Compras c ON c.ID = b.ID_Compra INNER JOIN Proveedor d ON c.ID_Proveedor = d.ID ORDER BY a.ID;

-- SELECT CASE WHEN ROUND(SUM(precio_total), 2) IS NULL THEN '0' ELSE ROUND(SUM(precio_total), 2) END 'Precio Total' FROM productos;

-- Cargar los productos conforme al Proveedor
-- SELECT a.ID, a.Nombre FROM Productos a INNER JOIN Detalle_Compra b ON a.ID_DetalleCompra = b.ID INNER JOIN Compras c ON b.ID_Compra = c.ID WHERE c.ID_Proveedor = 3;

-- Total de capital invertido en productos
-- SELECT CASE WHEN ROUND(SUM(precio_total), 2) IS NULL THEN '0' ELSE ROUND(SUM(precio_total), 2) END 'Precio Total' FROM productos;

-- Cantidad total de los productos

SELECT CASE WHEN COUNT(*) IS NULL THEN '0' ELSE COUNT(*)  END 'Cantidad de productos' FROM productos;

-- ------------------------------------------------------------ Consultas realcionado a las compras --------------------------------------------------------------

--  Mostrar todas las compras realizadas
SELECT * FROM Compras;

-- Mostrar todas las compras con datos especificos
CREATE VIEW Mostrar_Compras AS SELECT a.ID, a.Fecha, a.Descripcion AS 'Referencia', a.Tipo_Pago AS 'Tipo de pago', COUNT(b.ID) AS 'Cantidad de productos comprados', a.Subtotal, a.Descuento, a.IVA, a.Total_Final AS 'Total', d.Nombre 'Nombre del usuario' , a.Nombre_Vendedor AS 'Nombre del vendedor',  c.Nombre FROM Compras a INNER JOIN Detalle_Compra b ON a.ID = b.ID_Compra INNER JOIN Proveedor c ON a.ID_Proveedor = c.ID INNER JOIN Usuarios d ON a.ID_Usuario = d.ID GROUP BY a.ID ORDER BY a.ID;

-- ---------------------------------------------------------------- Consultas realcionado al Home -----------------------------------------------------------------

-- Sumar los ingresos obtenidos de una determinada fecha
-- SELECT CASE WHEN SUM(Total_Final - Debe) IS NULL THEN '0' ELSE SUM(Total_Final - Debe) END AS 'Total ingresado por fecha' FROM Facturas WHERE DATE_FORMAT(fecha, '%Y/%m/%d') = '2023/08/18';

-- Mostrar cantidad de facturas realizar en un día determinado
-- SELECT COUNT(ID) FROM Facturas WHERE DATE_FORMAT(Fecha, '%Y/%m/%d') = '2022/08/23';

-- Mostrar cantidad de facturas anuladas
-- SELECT COUNT(ID) FROM Facturas WHERE Estado = 'Anulada';

-- Mostrar el Total de todas las facturas
-- SELECT CASE WHEN SUM(Total_Final - Debe) IS NULL THEN '0.00' ELSE SUM(Total_Final - Debe) END AS 'Total ingresado por fecha' FROM Facturas;

-- Mostrar cantidad de facturas realizar en el día
-- SELECT COUNT(ID) FROM Facturas WHERE DATE_FORMAT(Fecha, '%Y/%m/%d') = DATE_FORMAT(NOW(), '%Y/%m/%d');

-- Mostrar el nombre del cliente con la fecha según la fecha actual
-- SELECT a.ID, b.Nombre AS 'Nombre del cliente', a.Fecha FROM Facturas a INNER JOIN Clientes b ON a.ID_Cliente = b.ID WHERE DATE_FORMAT(a.Fecha, '%Y/%m/%d') =  DATE_FORMAT(NOW(), '%Y/%m/%d');

-- Mostrar el total de facturas realizadas en el dia
-- SELECT COUNT(*) AS 'Total' FROM Facturas WHERE DATE_FORMAT(Fecha, '%Y/%m/%d') = '2023/08/16'

-- --------------------------------------------------------------- Consultas realcionado a la factura -----------------------------------------------------------------

-- Mostrar facturación con campos especificos
CREATE VIEW Mostrar_Factura AS SELECT a.ID, CONCAT('FAC-', LPAD(a.Codigo_Fac, 5, '0')) AS 'Codigo', a.Estado, a.Fecha, c.Nombre AS 'Nombre cliente', SUM(b.Cantidad) AS 'Cantidad de productos', a.Tipo_Pago AS 'Tipo de pago', CONCAT('C$ ', FORMAT(a.Subtotal, 2)) AS 'Subtotal', CONCAT('C$ ', FORMAT(a.Descuento, 2)) AS Descuento, CONCAT('C$ ', FORMAT(a.Total_Final, 2)) AS 'Total Final', CONCAT('C$ ', FORMAT(a.Efectivo, 2)) AS Efectivo, CONCAT('C$ ', FORMAT(a.Devolucion, 2)) AS Devolucion, CONCAT('C$ ', FORMAT(a.Debe, 2)) AS Debe, d.Nombre AS 'Nombre empleado' FROM Facturas a INNER JOIN Detalle_Factura b ON a.ID = b.ID_Factura INNER JOIN Clientes c ON a.ID_Cliente = c.ID INNER JOIN Usuarios d ON a.ID_Usuario = d.ID WHERE DATE(a.Fecha) = CURDATE() GROUP BY a.ID ORDER BY a.ID DESC LIMIT 10;

CREATE VIEW Mostrar_TodasFactura AS SELECT a.ID, CONCAT('FAC-', LPAD(a.Codigo_Fac, 5, '0')) AS 'Codigo', a.Estado, a.Fecha, c.Nombre AS 'Nombre cliente', SUM(b.Cantidad) AS 'Cantidad de productos', a.Tipo_Pago AS 'Tipo de pago', CONCAT('C$ ', FORMAT(a.Subtotal, 2)) AS 'Subtotal', CONCAT('C$ ', FORMAT(a.Descuento, 2)) AS Descuento, CONCAT('C$ ', FORMAT(a.Total_Final, 2)) AS 'Total Final', CONCAT('C$ ', FORMAT(a.Efectivo, 2)) AS Efectivo, CONCAT('C$ ', FORMAT(a.Devolucion, 2)) AS Devolucion, CONCAT('C$ ', FORMAT(a.Debe, 2)) AS Debe, d.Nombre AS 'Nombre empleado' FROM Facturas a INNER JOIN Detalle_Factura b ON a.ID = b.ID_Factura INNER JOIN Clientes c ON a.ID_Cliente = c.ID INNER JOIN Usuarios d ON a.ID_Usuario = d.ID GROUP BY a.ID ORDER BY a.ID;

-- Mostrar facturación con campos especificos (Rango entre fechas)
DELIMITER //
	CREATE PROCEDURE Factura_RangoFecha(IN Fec_Inicio DATETIME, IN Fec_Final DATETIME)
	BEGIN
		SELECT a.ID, CONCAT('FAC-', LPAD(a.Codigo_Fac, 5, '0')) AS 'Codigo', a.Estado, a.Fecha, c.Nombre AS 'Nombre cliente', SUM(b.Cantidad) AS 'Cantidad de productos', a.Tipo_Pago AS 'Tipo de pago', CONCAT('C$ ', FORMAT(a.Subtotal, 2)) AS 'Subtotal', CONCAT('C$ ', FORMAT(a.Descuento, 2)) AS Descuento, CONCAT('C$ ', FORMAT(a.Total_Final, 2)) AS 'Total Final', CONCAT('C$ ', FORMAT(a.Efectivo, 2)) AS Efectivo, CONCAT('C$ ', FORMAT(a.Devolucion, 2)) AS Devolucion, CONCAT('C$ ', FORMAT(a.Debe, 2)) AS Debe, d.Nombre AS 'Nombre empleado' FROM Facturas a INNER JOIN Detalle_Factura b ON a.ID = b.ID_Factura INNER JOIN Clientes c ON a.ID_Cliente = c.ID INNER JOIN Usuarios d ON a.ID_Usuario = d.ID WHERE DATE_FORMAT(Fecha, '%Y/%m/%d') BETWEEN Fec_Inicio AND Fec_Final GROUP BY a.ID ORDER BY a.ID;
	END //
DELIMITER ;

-- Buscar facturas por nombres de cliente 
DELIMITER //
	CREATE PROCEDURE Factura_NombreCliente(IN _Nombre_Cliente VARCHAR(100))
	BEGIN
		SELECT a.ID, CONCAT('FAC-', LPAD(a.Codigo_Fac, 5, '0')) AS 'Codigo', a.Estado, a.Fecha, c.Nombre AS 'Nombre cliente', SUM(b.Cantidad) AS 'Cantidad de productos', a.Tipo_Pago AS 'Tipo de pago', CONCAT('C$ ', FORMAT(a.Subtotal, 2)) AS 'Subtotal', CONCAT('C$ ', FORMAT(a.Descuento, 2)) AS Descuento, CONCAT('C$ ', FORMAT(a.Total_Final, 2)) AS 'Total Final', CONCAT('C$ ', FORMAT(a.Efectivo, 2)) AS Efectivo, CONCAT('C$ ', FORMAT(a.Devolucion, 2)) AS Devolucion, CONCAT('C$ ', FORMAT(a.Debe, 2)) AS Debe, d.Nombre AS 'Nombre empleado' FROM Facturas a INNER JOIN Detalle_Factura b ON a.ID = b.ID_Factura INNER JOIN Clientes c ON a.ID_Cliente = c.ID INNER JOIN Usuarios d ON a.ID_Usuario = d.ID WHERE c.Nombre LIKE CONCAT('%',_Nombre_Cliente, '%') GROUP BY a.ID ORDER BY a.ID;
	END //
DELIMITER ;

-- Mostrar facturación con campos especificos (Pidiento un mes de referencia)
SELECT * FROM Mostrar_Factura WHERE MONTH(fecha) = 8 GROUP BY ID;

-- Listar todos los detalles de una factura (Productos comprados) de un determinado cliente por su nombre
-- SELECT a.Cantidad, b.Nombre, a.Precio, a.Total FROM Detalle_Factura a INNER JOIN Productos b ON a.ID_Producto = b.ID INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID WHERE d.Nombre = "Juan Lopez";

-- Listar todos los detalles de una factura (Productos comprados) de un determinado cliente por su ID
-- SELECT a.Cantidad, b.Nombre, a.Precio, a.Total FROM Detalle_Factura a INNER JOIN Productos b ON a.ID_Producto = b.ID INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID WHERE d.ID = 1;

-- Buscar facturas por ID de cliente 
-- SELECT a.ID, b.Nombre, a.Fecha, a.Descuento, a.Cantidad_Descont, a.Subtotal, a.Total_Final, a.Efectivo, a.Devolucion FROM Facturas a INNER JOIN Clientes b ON a.ID_Cliente = b.ID WHERE b.ID = 1;

-- Total de facturas canceladas
-- SELECT CASE WHEN SUM(Total_Final) IS NULL THEN '0' ELSE SUM(Total_Final) END 'Total'  FROM Facturas WHERE Estado = 'Cancelado';
	
-- Total de facturas pendientes
-- SELECT CASE WHEN SUM(Efectivo) IS NULL THEN '0' ELSE SUM(Efectivo) END 'Total'   FROM Facturas WHERE Estado = 'Pendiente';
	
-- ----------------------------------------------------------- Consultas realcionado a las devoluciones -------------------------------------------------------------

-- Mostrar las devoluciones realizadas 
CREATE VIEW Mostrar_Devoluciones AS SELECT a.ID, CONCAT('FAC-', LPAD(c.Codigo_Fac, 5, '0')) AS 'Codigo de factura', a.Fecha, c.Estado, a.Descripcion, SUM(b.Cantidad) AS 'Cantidad', CONCAT('C$ ', FORMAT(SUM(b.Total), 2)) AS 'Total', d.Nombre AS 'Cliente', e.Nombre AS 'Trabajador'FROM Devoluciones a INNER JOIN Detalle_Devolucion b ON a.ID = b.ID_Devolucion INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID INNER JOIN Usuarios e ON c.ID_Usuario = e.ID GROUP BY a.ID;

-- Mostrar las devoluciones (Rango entre fechas)
DELIMITER //
	CREATE PROCEDURE Devoluciones_RangoFecha(IN Fec_Inicio DATETIME, IN Fec_Final DATETIME)
	BEGIN
		SELECT a.ID, CONCAT('FAC-', LPAD(c.Codigo_Fac, 5, '0')) AS 'Codigo de factura', a.Fecha, c.Estado, a.Descripcion, SUM(b.Cantidad) AS 'Cantidad', CONCAT('C$ ', FORMAT(SUM(b.Total), 2)) AS 'Total', d.Nombre AS 'Cliente', e.Nombre AS 'Trabajador'FROM Devoluciones a INNER JOIN Detalle_Devolucion b ON a.ID = b.ID_Devolucion INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID INNER JOIN Usuarios e ON c.ID_Usuario = e.ID WHERE DATE_FORMAT(a.Fecha, '%Y/%m/%d') BETWEEN Fec_Inicio AND Fec_Final GROUP BY a.ID ORDER BY a.ID;
	END //
DELIMITER ;

-- Buscar devolución por nombres de cliente 
DELIMITER //
	CREATE PROCEDURE Devoluciones_NombreCliente(IN _Nombre_Cliente VARCHAR(100))
	BEGIN
		SELECT a.ID, CONCAT('FAC-', LPAD(c.Codigo_Fac, 5, '0')) AS 'Codigo de factura', a.Fecha, c.Estado, a.Descripcion, SUM(b.Cantidad) AS 'Cantidad', CONCAT('C$ ', FORMAT(SUM(b.Total), 2)) AS 'Total', d.Nombre AS 'Cliente', e.Nombre AS 'Trabajador'FROM Devoluciones a INNER JOIN Detalle_Devolucion b ON a.ID = b.ID_Devolucion INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID INNER JOIN Usuarios e ON c.ID_Usuario = e.ID WHERE d.Nombre LIKE CONCAT('%',_Nombre_Cliente, '%') GROUP BY a.ID ORDER BY a.ID;
	END //
DELIMITER ;

-- Buscar devolución por estado de factura
DELIMITER //
	CREATE PROCEDURE Devoluciones_EstadoFact(IN _Estado VARCHAR(100))
	BEGIN
		SELECT a.ID, CONCAT('FAC-', LPAD(c.Codigo_Fac, 5, '0')) AS 'Codigo de factura', a.Fecha, c.Estado, a.Descripcion, SUM(b.Cantidad) AS 'Cantidad', CONCAT('C$ ', FORMAT(SUM(b.Total), 2)) AS 'Total', d.Nombre AS 'Cliente', e.Nombre AS 'Trabajador'FROM Devoluciones a INNER JOIN Detalle_Devolucion b ON a.ID = b.ID_Devolucion INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID INNER JOIN Usuarios e ON c.ID_Usuario = e.ID WHERE c.Estado = _Estado GROUP BY a.ID ORDER BY a.ID;
	END //
DELIMITER ;

-- Mostrar detalle de la devolución
-- SELECT a.Codigo_Prod AS 'Codigo', a.Nombre_Prod AS 'Nombre', a.Precio, a.Cantidad, a.Total FROM Detalle_Devolucion a INNER JOIN Devoluciones b ON a.ID_Devolucion= b.ID WHERE a.ID_Devolucion = 1;

-- ----------------------------------------------------------- Consultas realcionado al crédito y abono -------------------------------------------------------------

-- Mostrar los creditos realizados
CREATE VIEW Mostrar_Creditos AS SELECT a.ID, CONCAT('FAC-', LPAD(c.Codigo_Fac, 5, '0')) AS 'Codigo de factura', d.Nombre AS 'Nombre del cliente', a.Estado, a.DiaDeCredito AS 'Inicio del credito', a.DiaDeVencimiento AS 'Fin del credito', CASE WHEN (DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento)) < 0 THEN '0' ELSE DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento) END AS 'Días vencidos', CONCAT('C$ ', FORMAT(a.Cargo, 2)) AS 'Cargo', CONCAT('C$ ', FORMAT(c.Debe, 2)) AS 'Pendiente', CONCAT('C$ ', FORMAT(SUM(e.Monto), 2)) AS 'Total de monto', c.ID 'ID Factura' FROM Credito a INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID INNER JOIN Abono e ON a.ID = e.ID_Credito GROUP BY a.ID ORDER BY a.ID;

-- Mostrar estado de cuenta
CREATE VIEW Mostrar_EstadoCredito AS SELECT e.ID, e.Descripcion AS 'Concepto', CONCAT('C$ ', FORMAT(e.Saldo_Anterior, 2)) AS 'Saldo anterior', CONCAT('C$ ', FORMAT(a.Cargo, 2)) AS 'Cargo', CONCAT('C$ ', FORMAT(e.Monto, 2)) AS 'Abono', CONCAT('C$ ', FORMAT(e.Saldo_Nuevo, 2)) AS 'Saldo nuevo', e.ID_Credito FROM Credito a INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID INNER JOIN Abono e ON a.ID = e.ID_Credito GROUP BY e.ID ORDER BY e.ID ASC;

-- Mostrar las facturas al credito(Rango entre fechas)
DELIMITER //
	CREATE PROCEDURE Credito_RangoFecha(IN Fec_Inicio DATETIME, IN Fec_Final DATETIME)
	BEGIN
		SELECT a.ID, CONCAT('FAC-', LPAD(c.Codigo_Fac, 5, '0')) AS 'Codigo de factura', d.Nombre AS 'Nombre del cliente', a.Estado, a.DiaDeCredito AS 'Inicio del credito', a.DiaDeVencimiento AS 'Fin del credito', CASE WHEN (DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento)) < 0 THEN '0' ELSE DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento) END AS 'Dias vencidos', CONCAT('C$ ', FORMAT(a.Cargo, 2)) AS 'Cargo', CONCAT('C$ ', FORMAT(c.Debe, 2)) AS 'Pendiente', CONCAT('C$ ', FORMAT(SUM(e.Monto), 2)) AS 'Total de monto', c.ID 'ID Factura' FROM Credito a INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID INNER JOIN Abono e ON a.ID = e.ID_Credito WHERE DATE_FORMAT(a.DiaDeCredito,'%Y/%m/%d') BETWEEN Fec_Inicio AND Fec_Final GROUP BY a.ID ORDER BY a.ID;
	END //
DELIMITER ;

-- Buscar facturas al credito por nombres de cliente 
DELIMITER //
	CREATE PROCEDURE Credito_NombreCliente(IN _Nombre_Cliente VARCHAR(100))
	BEGIN
		SELECT a.ID, CONCAT('FAC-', LPAD(c.Codigo_Fac, 5, '0')) AS 'Codigo de factura', d.Nombre AS 'Nombre del cliente', a.Estado, a.DiaDeCredito AS 'Inicio del credito', a.DiaDeVencimiento AS 'Fin del credito', CASE WHEN (DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento)) < 0 THEN '0' ELSE DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento) END AS 'Dias vencidos', CONCAT('C$ ', FORMAT(a.Cargo, 2)) AS 'Cargo', CONCAT('C$ ', FORMAT(c.Debe, 2)) AS 'Pendiente', CONCAT('C$ ', FORMAT(SUM(e.Monto), 2)) AS 'Total de monto', c.ID 'ID Factura' FROM Credito a INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID INNER JOIN Abono e ON a.ID = e.ID_Credito WHERE d.Nombre LIKE CONCAT('%',_Nombre_Cliente, '%') GROUP BY a.ID ORDER BY a.ID;
	END //
DELIMITER ;

-- Buscar facturas al crédito por estado de factura
DELIMITER //
	CREATE PROCEDURE Credito_EstadoFact(IN _Estado VARCHAR(100))
	BEGIN
		SELECT a.ID, CONCAT('FAC-', LPAD(c.Codigo_Fac, 5, '0')) AS 'Codigo de factura', d.Nombre AS 'Nombre del cliente', a.Estado, a.DiaDeCredito AS 'Inicio del credito', a.DiaDeVencimiento AS 'Fin del credito', CASE WHEN (DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento)) < 0 THEN '0' ELSE DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento) END AS 'Dias vencidos', CONCAT('C$ ', FORMAT(a.Cargo, 2)) AS 'Cargo', CONCAT('C$ ', FORMAT(c.Debe, 2)) AS 'Pendiente', CONCAT('C$ ', FORMAT(SUM(e.Monto), 2)) AS 'Total de monto', c.ID 'ID Factura' FROM Credito a INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID INNER JOIN Abono e ON a.ID = e.ID_Credito WHERE a.Estado = _Estado GROUP BY a.ID ORDER BY a.ID;
	END //
DELIMITER ;

-- Buscar factura al crédito por días vencidos
DELIMITER //
	CREATE PROCEDURE Creditos_DiasVencidos(_aux INT)
	BEGIN
		IF (_aux = 1) THEN
			SELECT a.ID, CONCAT('FAC-', LPAD(c.Codigo_Fac, 5, '0')) AS 'Codigo de factura', d.Nombre AS 'Nombre del cliente', a.Estado, a.DiaDeCredito AS 'Inicio del credito', a.DiaDeVencimiento AS 'Fin del credito', CASE WHEN (DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento)) < 0 THEN '0' ELSE DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento) END AS 'Dias vencidos', CONCAT('C$ ', FORMAT(a.Cargo, 2)) AS 'Cargo', CONCAT('C$ ', FORMAT(c.Debe, 2)) AS 'Pendiente', CONCAT('C$ ', FORMAT(SUM(e.Monto), 2)) AS 'Total de monto', c.ID 'ID Factura' FROM Credito a INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID INNER JOIN Abono e ON a.ID = e.ID_Credito WHERE DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento) != '0' GROUP BY a.ID ORDER BY a.ID;
		ELSEIF (_aux = 2) THEN
			SELECT a.ID, CONCAT('FAC-', LPAD(c.Codigo_Fac, 5, '0')) AS 'Codigo de factura', d.Nombre AS 'Nombre del cliente', a.Estado, a.DiaDeCredito AS 'Inicio del credito', a.DiaDeVencimiento AS 'Fin del credito', CASE WHEN (DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento)) < 0 THEN '0' ELSE DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento) END AS 'Dias vencidos', CONCAT('C$ ', FORMAT(a.Cargo, 2)) AS 'Cargo', CONCAT('C$ ', FORMAT(c.Debe, 2)) AS 'Pendiente', CONCAT('C$ ', FORMAT(SUM(e.Monto), 2)) AS 'Total de monto', c.ID 'ID Factura' FROM Credito a INNER JOIN Facturas c ON a.ID_Factura = c.ID INNER JOIN Clientes d ON c.ID_Cliente = d.ID INNER JOIN Abono e ON a.ID = e.ID_Credito WHERE DATEDIFF(CURRENT_DATE(), a.DiaDeVencimiento) = '0' GROUP BY a.ID ORDER BY a.ID;
		END IF;
	END //
DELIMITER ;


-- CONSULTAS PENDIENTES

-- Total vendido de los ultimos 5 días

-- Total vendido por mes
CREATE VIEW Total_x_MES AS SELECT
	YEAR(Fecha) AS 'Año',
	CONVERT(MONTHNAME(Fecha) USING utf8) AS 'Mes',
	SUM(Total_Final - Debe) AS 'Total vendido'
FROM Facturas
GROUP BY YEAR(Fecha), CONVERT(MONTHNAME(Fecha) USING utf8)
ORDER BY YEAR(Fecha), CONVERT(MONTHNAME(Fecha) USING utf8);

-- Total vendido por semana

SELECT YEARWEEK(Fecha) AS Semana,
       SUM(Total_Final) AS 'Total vendido'
FROM Facturas
GROUP BY YEARWEEK(Fecha);

-- Últimos clientes registrados
-- Última factura con el total

-- Cantidad de ventas en los últimos 7 días
SELECT DATE_FORMAT(Fecha, '%Y-%m-%d'), COUNT(ID) FROM Facturas WHERE DATE_FORMAT(Fecha, '%Y-%m-%d') BETWEEN CURDATE() - INTERVAL 7 DAY AND CURDATE() GROUP BY DATE_FORMAT(Fecha, '%Y-%m-%d');

-- Total de capital de ventas en los últimos 7 días
SELECT DATE_FORMAT(Fecha, '%Y-%m-%d'), SUM(Efectivo - Debe) FROM Facturas WHERE DATE_FORMAT(Fecha, '%Y-%m-%d') BETWEEN CURDATE() - INTERVAL 7 DAY AND CURDATE() GROUP BY DATE_FORMAT(Fecha, '%Y-%m-%d');

-- Productos más vendidos
SELECT Nombre_Prod AS 'Nombre producto', SUM(Cantidad) AS 'Cantidad Vendida' FROM Detalle_Factura WHERE cantidad > 0 GROUP BY Nombre_Prod  ORDER BY SUM(Cantidad) DESC LIMIT 5;


-- Mostrar factura al crédito de un cliente (Todas las facturas).


